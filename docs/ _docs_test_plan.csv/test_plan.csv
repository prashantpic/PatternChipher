test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
CT-INF-001,"Repository Tooling and Quality Assurance",Smoke,Unit,High,Yes,"Verify that the project initializes correctly and all required dependencies can be installed.","A machine with Node.js and npm installed. The repository has been cloned.","1. Navigate to the root directory of the repository.
2. Run the command `npm install`.","The command completes successfully with exit code 0. A `node_modules` directory is created, and `ajv`, `jest`, and `ajv-formats` are installed.",`package.json` with defined dev dependencies.,Node.js/npm,S,
CT-INF-002,"Repository Tooling and Quality Assurance",Smoke,Unit,High,Yes,"Verify that the Jest test runner is correctly configured and can be executed via the npm script.","The project dependencies have been installed via `npm install`.","1. Navigate to the root directory of the repository.
2. Run the command `npm test`.","The Jest test runner starts, executes (even if it finds no tests), and exits gracefully. It should not throw an error about the command not being found.",`package.json` with a `test` script configured to run `jest`.,Node.js/npm,S,CT-INF-001
CT-DV-001,"Repository Tooling and Quality Assurance",Functional,Unit,High,Yes,"Verify that the schema loading utility can successfully load and parse a known, valid JSON schema file from the EventDefinitions directory.","The test framework is set up, and at least one valid JSON schema file (e.g., `SessionStartEvent.json`) exists in the `EventDefinitions` directory.","1. In a test script, call the schema loader utility function with the name of a valid schema (e.g., 'SessionStartEvent').
2. Assert that the returned object is not null or undefined.
3. Assert that the returned object has expected properties from the schema (e.g., 'title', 'properties').","The test case passes. The utility function returns a valid JavaScript object representing the parsed JSON schema.",A valid JSON schema file in the expected directory.,Jest,S,TASK-107
CT-UNIT-001,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify that the `SessionStartEvent` schema correctly validates a well-formed, complete payload.","The `SessionStartEvent.json` schema is defined. The Jest/ajv test framework is set up.","1. Create a valid JSON object payload for a `session_start` event, including all required fields with correct data types.
2. Use the test framework to validate this payload against the `SessionStartEvent.json` schema.
3. Assert that the validation result is `true`.","The test passes, confirming the schema accepts valid data.",A valid `session_start` payload object.,Jest; ajv,S,TASK-101.1
CT-UNIT-002,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify that the `SessionStartEvent` schema correctly rejects a payload that is missing a required field (e.g., `platform`).","The `SessionStartEvent.json` schema is defined. The Jest/ajv test framework is set up.","1. Create an invalid JSON object payload for a `session_start` event that omits the `platform` field.
2. Use the test framework to validate this payload against the `SessionStartEvent.json` schema.
3. Assert that the validation result is `false`.","The test passes, confirming the schema enforces the `required` constraint.",An invalid `session_start` payload missing one required field.,Jest; ajv,S,TASK-101.1
CT-UNIT-003,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify that the `SessionStartEvent` schema correctly rejects a payload that has a field with an incorrect data type (e.g., `app_version` as a number).","The `SessionStartEvent.json` schema is defined. The Jest/ajv test framework is set up.","1. Create an invalid JSON object payload for a `session_start` event where `app_version` is a number instead of a string.
2. Use the test framework to validate this payload against the `SessionStartEvent.json` schema.
3. Assert that the validation result is `false`.","The test passes, confirming the schema enforces the `type` constraint.",An invalid `session_start` payload with an incorrect data type for one field.,Jest; ajv,S,TASK-101.1
CT-UNIT-004,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify that the `LevelStartEvent` schema correctly validates a well-formed, complete payload.","The `LevelStartEvent.json` schema is defined. The Jest/ajv test framework is set up.","1. Create a valid JSON object payload for a `level_start` event, including `difficulty` as a number.
2. Use the test framework to validate this payload against the `LevelStartEvent.json` schema.
3. Assert that the validation result is `true`.","The test passes, confirming the schema accepts valid data.",A valid `level_start` payload object.,Jest; ajv,S,TASK-102.1
CT-UNIT-005,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify that the `LevelStartEvent` schema correctly rejects a payload with an incorrect data type for `difficulty`.","The `LevelStartEvent.json` schema is defined. The Jest/ajv test framework is set up.","1. Create an invalid JSON object payload for a `level_start` event where `difficulty` is a string instead of a number.
2. Use the test framework to validate this payload against the `LevelStartEvent.json` schema.
3. Assert that the validation result is `false`.","The test passes, confirming the schema enforces the `type` constraint for numeric fields.",An invalid `level_start` payload with `difficulty` as a string.,Jest; ajv,S,TASK-102.1
CT-UNIT-007,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `LevelOutcomeEvent` schema validates a correct payload when `outcome` is 'complete'.","The `LevelOutcomeEvent.json` schema is defined with conditional logic. The Jest/ajv test framework is set up.","1. Create a valid payload where `outcome` is 'complete', and it includes the `score` and `stars_awarded` fields.
2. Validate the payload against the `LevelOutcomeEvent.json` schema.
3. Assert that the validation is `true`.","The test passes, confirming the conditional requirement for 'complete' is met.",A valid `level_outcome` payload for a 'complete' scenario.,Jest; ajv,M,TASK-103.1
CT-UNIT-008,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `LevelOutcomeEvent` schema rejects a payload when `outcome` is 'complete' but `score` is missing.","The `LevelOutcomeEvent.json` schema is defined with conditional logic. The Jest/ajv test framework is set up.","1. Create an invalid payload where `outcome` is 'complete' but it is missing the `score` field.
2. Validate the payload against the `LevelOutcomeEvent.json` schema.
3. Assert that the validation is `false`.","The test passes, confirming the `if/then` logic correctly rejects the invalid payload.",An invalid `level_outcome` payload for a 'complete' scenario missing the score.,Jest; ajv,M,TASK-103.1
CT-UNIT-010,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `LevelOutcomeEvent` schema validates a correct payload when `outcome` is 'fail'.","The `LevelOutcomeEvent.json` schema is defined with conditional logic. The Jest/ajv test framework is set up.","1. Create a valid payload where `outcome` is 'fail' and it includes the `failure_reason` field.
2. Validate the payload against the `LevelOutcomeEvent.json` schema.
3. Assert that the validation is `true`.","The test passes, confirming the conditional requirement for 'fail' is met.",A valid `level_outcome` payload for a 'fail' scenario.,Jest; ajv,M,TASK-103.1
CT-UNIT-011,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `LevelOutcomeEvent` schema rejects a payload when `outcome` is 'fail' but `failure_reason` is missing.","The `LevelOutcomeEvent.json` schema is defined with conditional logic. The Jest/ajv test framework is set up.","1. Create an invalid payload where `outcome` is 'fail' but it is missing the `failure_reason` field.
2. Validate the payload against the `LevelOutcomeEvent.json` schema.
3. Assert that the validation is `false`.","The test passes, confirming the `if/then` logic correctly rejects the invalid payload.",An invalid `level_outcome` payload for a 'fail' scenario missing the failure reason.,Jest; ajv,M,TASK-103.1
CT-UNIT-012,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `LevelOutcomeEvent` schema validates a payload when `outcome` is 'quit' and conditionally required fields are absent.","The `LevelOutcomeEvent.json` schema is defined with conditional logic. The Jest/ajv test framework is set up.","1. Create a valid payload where `outcome` is 'quit' and it does *not* include `score`, `stars_awarded`, or `failure_reason`.
2. Validate the payload against the `LevelOutcomeEvent.json` schema.
3. Assert that the validation is `true`.","The test passes, confirming that payloads for the 'quit' outcome do not trigger the conditional requirements.",A valid `level_outcome` payload for a 'quit' scenario.,Jest; ajv,M,TASK-103.1
CT-UNIT-014,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `PlayerActionUsedEvent` schema validates a payload with a valid `actionType` from the enum (e.g., 'hint').","The `PlayerActionUsedEvent.json` schema is defined with an enum constraint. The Jest/ajv test framework is set up.","1. Create a valid payload where `actionType` is 'hint'.
2. Validate the payload against the `PlayerActionUsedEvent.json` schema.
3. Assert that the validation is `true`.","The test passes, confirming the `enum` constraint accepts a valid value.",A valid `player_action_used` payload with `actionType: 'hint'`.,Jest; ajv,S,TASK-104.1
CT-UNIT-016,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `PlayerActionUsedEvent` schema rejects a payload with an invalid `actionType` not in the enum.","The `PlayerActionUsedEvent.json` schema is defined with an enum constraint. The Jest/ajv test framework is set up.","1. Create an invalid payload where `actionType` is 'some_other_action'.
2. Validate the payload against the `PlayerActionUsedEvent.json` schema.
3. Assert that the validation is `false`.","The test passes, confirming the `enum` constraint rejects invalid values.",An invalid `player_action_used` payload with `actionType: 'some_other_action'`.,Jest; ajv,S,TASK-104.1
CT-UNIT-017,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `ClientErrorEvent` schema validates a payload with a correctly formatted SHA256 `stackTraceHash`.","The `ClientErrorEvent.json` schema is defined with a regex pattern. The Jest/ajv test framework is set up.","1. Create a valid payload with a `stackTraceHash` that is a 64-character lowercase hexadecimal string.
2. Validate the payload against the `ClientErrorEvent.json` schema.
3. Assert that the validation is `true`.","The test passes, confirming the `pattern` constraint works for valid hashes.","A valid `client_error` payload with a valid 64-char hex string for the hash.,Jest; ajv,S,TASK-105.1
CT-UNIT-018,"Event Contract Definition and Implementation",Functional,Unit,Critical,Yes,"Verify `ClientErrorEvent` schema rejects a payload where `stackTraceHash` does not match the regex pattern (e.g., too short).","The `ClientErrorEvent.json` schema is defined with a regex pattern. The Jest/ajv test framework is set up.","1. Create an invalid payload with a `stackTraceHash` that is only 63 characters long.
2. Validate the payload against the `ClientErrorEvent.json` schema.
3. Assert that the validation is `false`.","The test passes, confirming the `pattern` constraint rejects invalid hashes based on length.",An invalid `client_error` payload with a 63-char hex string for the hash.,Jest; ajv,S,TASK-105.1
CT-SYS-001,"Repository Tooling and Quality Assurance",Regression,System,High,Yes,"Verify the CI pipeline successfully passes for a pull request with valid changes.","A CI workflow file (`validation.yml`) is configured to run `npm test` on pull requests. The test suite is passing on the main branch.","1. Create a new branch.
2. Make a valid, non-breaking change (e.g., add a description to a schema field).
3. Push the branch and open a pull request against `main`.
4. Observe the CI pipeline execution in GitHub.","The CI pipeline job runs and completes with a 'success' status.",A GitHub repository with Actions enabled.,GitHub Actions,M,US-108
CT-SYS-002,"Repository Tooling and Quality Assurance",Functional,System,High,Yes,"Verify the CI pipeline correctly fails for a pull request that introduces a breaking change in the tests.","A CI workflow file (`validation.yml`) is configured to run `npm test` on pull requests. The test suite is passing on the main branch.","1. Create a new branch.
2. Introduce a change that will cause a contract test to fail (e.g., change a field name in a schema without updating tests).
3. Push the branch and open a pull request against `main`.
4. Observe the CI pipeline execution in GitHub.","The CI pipeline job runs and completes with a 'failure' status, blocking the pull request from being merged.",A GitHub repository with Actions enabled.,GitHub Actions,M,US-108
CT-DOC-001,"Governance and Documentation",Usability,User Acceptance,High,No,"Review the README.md file for clarity, completeness, and correctness against the Software Design Specification.","A draft of the `README.md` file exists.","1. Read the `README.md` file.
2. Compare its content (purpose, principles, event list) against the SDS.
3. Check for grammatical errors, typos, and broken links.
4. Assess if a new developer from a client team could understand the repository's purpose and how to use the contracts.","The README is clear, accurate, and provides all necessary information for a consuming developer. Any identified issues are logged for correction.",A draft of README.md, The SDS document.,Markdown Viewer,S,US-109
CT-DOC-002,"Governance and Documentation",Functional,User Acceptance,High,No,"Review the CONTRIBUTING.md file to ensure the contribution workflow and versioning strategy are clear and unambiguous.","A draft of the `CONTRIBUTING.md` file exists.","1. Read the `CONTRIBUTING.md` file.
2. Verify that the fork/branch/PR workflow is clearly explained.
3. Verify that the Semantic Versioning strategy for schemas (Major/Minor/Patch) is well-defined and makes sense for data contracts.
4. Verify the PR review process is outlined.","The contribution guide is clear and provides a developer with all the rules and procedures needed to contribute a change to a schema.",A draft of CONTRIBUTING.md.,Markdown Viewer,S,US-110
CT-CONF-001,"Firebase Project Setup and Configuration",Functional,Integration,Critical,No,"Manually verify that all custom event names from the schemas have been registered in the Firebase Analytics console.","Access to the Firebase project is available. The list of final schema names is available.","1. Log in to the Firebase Console.
2. Navigate to Analytics -> Custom Definitions.
3. Switch to the 'Custom events' tab.
4. Compare the list of registered events against the source of truth (the 5 event schemas: `session_start`, `level_start`, `level_outcome`, `player_action_used`, `client_error`).","All 5 event names are present in the Firebase console list, with no typos.",List of the 5 canonical event names.,Firebase Console,M,US-111
CT-CONF-002,"Firebase Project Setup and Configuration",Functional,Integration,Critical,No,"Manually verify that all custom parameters for all events are registered with the correct name and data type in the Firebase Analytics console.","All custom events have been registered in the Firebase console. A complete list of all parameters and their intended types (Text/Number) is available.","1. In Firebase Console (Analytics -> Custom Definitions), click on 'Custom dimensions and metrics'.
2. For each of the 5 events, cross-reference every single parameter from its JSON schema with the registered parameters in the console.
3. Verify the parameter name is an exact match (case-sensitive).
4. Verify the data type is correct ('Text' for strings, 'Number' for long/integer).","All parameters from all schemas are registered. Names are an exact match. Numeric types (`difficulty`, `time_taken_seconds`, etc.) are registered as 'Number', and all others as 'Text'.",Complete list of all parameters across all schemas and their types.,Firebase Console,L,TASK-111.2
CT-INT-001,"Firebase Project Setup and Configuration",Smoke,Integration,High,No,"Verify that the Firebase Analytics to BigQuery integration has been enabled.","Access to the Firebase project and the corresponding Google Cloud project is available.","1. In the Firebase console, navigate to Project Settings -> Integrations.
2. Locate the BigQuery card.
3. Verify that it shows the integration is active and linked to a Google Cloud project.
4. (Optional) Navigate to the linked BigQuery project and verify that a dataset named `analytics_<project_id>` has been created.","The BigQuery integration is shown as 'Enabled' or 'Managed' in the Firebase console. The corresponding dataset exists in BigQuery.",None,Firebase Console; Google Cloud Console,S,US-111
CT-DOC-003,"Firebase Project Setup and Configuration",Functional,System,High,No,"Review the Firebase Configuration audit document to ensure it is a complete and accurate snapshot of the manual setup.","The manual Firebase configuration is complete. The audit document (e.g., `Firebase_Config_Audit.md`) has been created with screenshots.","1. Open the audit document.
2. Open the live Firebase Console and navigate to the Custom Definitions sections.
3. Compare every screenshot in the document with the live configuration.
4. Ensure all custom events and all custom parameters are captured in the screenshots and that the screenshots match the live configuration exactly.","The audit document is a 100% accurate representation of the live Firebase configuration.",The created audit document with screenshots.,Markdown Viewer; Firebase Console,M,TASK-111.3