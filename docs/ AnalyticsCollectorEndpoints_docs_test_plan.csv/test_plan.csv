test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
AC-CONF-001,Analytics Service Configuration (US-001),Functional,User Acceptance Testing,Critical,Manual Only,"Verify `analytics_configuration.yaml` contains correct `data_retention` and `bigquery_export` sections as per SDS.","The `analytics_configuration.yaml` file has been created and is available for review in a pull request.","1. Open the `analytics_configuration.yaml` file from the PR.
2. Open the SDS document to Section 2.
3. Compare the structure and values under the `data_retention` key.
4. Compare the structure and values under the `bigquery_export` key.","The structure, keys, and values must match the SDS exactly. The `project_id` value is expected to be a placeholder.","`analytics_configuration.yaml` file, SDS document.","Git, Text Editor/IDE","0.25","TASK-ANA-001"
AC-CONF-002,Analytics Service Configuration (US-001),Functional,User Acceptance Testing,Critical,Manual Only,"Verify `analytics_configuration.yaml` contains correct `default_consent_settings` section as per SDS.","The `analytics_configuration.yaml` file has been created and is available for review in a pull request.","1. Open the `analytics_configuration.yaml` file from the PR.
2. Open the SDS document to Section 2.
3. Compare the array structure and key-value pairs for each region under the `default_consent_settings` key.","The file must contain a list with entries for 'DEFAULT', 'GDPR', and 'CCPA' regions with the exact `ad_storage` and `analytics_storage` values specified in the SDS.","`analytics_configuration.yaml` file, SDS document.","Git, Text Editor/IDE","0.25","TASK-ANA-001"
AC-CONF-003,Analytics Service Configuration (US-001),Functional,User Acceptance Testing,Critical,Manual Only,"Verify `analytics_configuration.yaml` contains the `child_directed_treatment` policy description.","The `analytics_configuration.yaml` file has been created and is available for review in a pull request.","1. Open the `analytics_configuration.yaml` file from the PR.
2. Open the SDS document to Section 2.
3. Check for the presence of the `child_directed_treatment` key and its `description` sub-key.
4. Verify the description text matches the SDS.","The file must contain the `child_directed_treatment` section with the specified description.","`analytics_configuration.yaml` file, SDS document.","Git, Text Editor/IDE","0.25","TASK-ANA-001"
AC-SCHEMA-001,Custom Event Schemas (US-002),Functional,User Acceptance Testing,Critical,Manual Only,"Verify `custom_events.json` is a valid JSON array and contains all 8 specified events.","The `custom_events.json` file has been created and is available for review in a pull request.","1. Open the `schemas/custom_events.json` file.
2. Validate its syntax using a JSON validator.
3. Count the number of top-level objects in the array.
4. Check that the `eventName` for each object corresponds to one of the 8 required events (`level_start`, `level_complete`, etc.).","The file must be valid JSON, contain exactly 8 objects in the top-level array, and each object must have a unique `eventName` matching one of the events from the SDS.","`custom_events.json` file, SDS document.","Git, JSON Validator, Text Editor/IDE","0.5","TASK-ANA-003"
AC-SCHEMA-002,Custom Event Schemas (US-002),Functional,User Acceptance Testing,Critical,Manual Only,"Verify all parameters for the 'level_complete' event in `custom_events.json` precisely match the SDS.","The `custom_events.json` file has been created and is available for review in a pull request.","1. Open `schemas/custom_events.json` and locate the 'level_complete' event object.
2. Open the SDS document to Section 3.
3. For each parameter in the JSON object, verify that `paramName`, `dataType`, and `description` match the SDS exactly.
4. Ensure all 6 parameters are present.","The `level_complete` event must contain all 6 specified parameters (`level_id`, `moves_taken`, `time_taken_seconds`, `par_moves`, `score_achieved`, `stars_earned`) with perfectly matching names, data types, and descriptions.","`custom_events.json` file, SDS document.","Git, Text Editor/IDE","0.5","TASK-ANA-003"
AC-SCHEMA-003,User Property Schemas (US-003),Functional,User Acceptance Testing,Critical,Manual Only,"Verify `user_properties.json` is a valid JSON array and contains all 5 specified properties.","The `user_properties.json` file has been created and is available for review in a pull request.","1. Open the `schemas/user_properties.json` file.
2. Validate its syntax using a JSON validator.
3. Count the number of objects in the array.
4. Verify that each object's `propertyName` matches one of the 5 properties from the SDS.","The file must be valid JSON, contain exactly 5 objects in the top-level array, and each object must have a `propertyName` matching a property from the SDS.","`user_properties.json` file, SDS document.","Git, JSON Validator, Text Editor/IDE","0.25","TASK-ANA-005"
AC-SCHEMA-004,User Property Schemas (US-003),Functional,User Acceptance Testing,Critical,Manual Only,"Verify each user property's `propertyName`, `dataType`, and `description` in `user_properties.json` precisely matches the SDS.","The `user_properties.json` file has been created and is available for review in a pull request.","1. Open `schemas/user_properties.json`.
2. Open the SDS document to Section 4.
3. For each of the 5 property objects, verify that the `propertyName`, `dataType`, and `description` fields match the SDS exactly.","All 5 user properties must have perfectly matching names, data types, and descriptions as specified in the SDS.","`user_properties.json` file, SDS document.","Git, Text Editor/IDE","0.25","TASK-ANA-005"
AC-PRIVACY-001,Privacy Compliance Rules (US-004),Functional,User Acceptance Testing,Critical,Manual Only,"Verify `privacy_compliance_map.json` has the correct root structure.","The `privacy_compliance_map.json` file has been created and is available for review in a pull request.","1. Open `schemas/privacy_compliance_map.json`.
2. Validate its syntax using a JSON validator.
3. Verify that the root object contains the keys `compliance_actions`, `parameter_map`, and `user_property_map`.","The file must be valid JSON and contain the three specified top-level keys.","`privacy_compliance_map.json` file, SDS document.","Git, JSON Validator, Text Editor/IDE","0.25","TASK-ANA-007"
AC-PRIVACY-002,Privacy Compliance Rules (US-004),Functional,User Acceptance Testing,Critical,Manual Only,"Verify every event parameter from `custom_events.json` has a corresponding entry in `privacy_compliance_map.json`.","All three schema/config files are available for review in a pull request.","1. Open `custom_events.json` and list all unique `paramName` values.
2. Open `privacy_compliance_map.json`.
3. For each parameter name from the list, confirm its existence as a key in the `parameter_map` object.
4. Verify the value for each key matches the SDS (e.g., 'ALLOW').","Every parameter defined in `custom_events.json` must be present as a key in `parameter_map` with the correct compliance action string as its value.","`custom_events.json`, `privacy_compliance_map.json` files, SDS document.","Text Editor/IDE, Spreadsheet (optional)","1.0","TASK-ANA-007"
AC-PRIVACY-003,Privacy Compliance Rules (US-004),Functional,User Acceptance Testing,Critical,Manual Only,"Verify every user property from `user_properties.json` has a corresponding entry in `privacy_compliance_map.json`.","All three schema/config files are available for review in a pull request.","1. Open `user_properties.json` and list all unique `propertyName` values.
2. Open `privacy_compliance_map.json`.
3. For each property name from the list, confirm its existence as a key in the `user_property_map` object.
4. Verify the value for each key matches the SDS (e.g., 'OMIT_IF_UNCONSENTED').","Every property defined in `user_properties.json` must be present as a key in `user_property_map` with the correct compliance action string as its value.","`user_properties.json`, `privacy_compliance_map.json` files, SDS document.","Text Editor/IDE","0.5","TASK-ANA-007"
CI-LINT-001,Automated Linting (US-005),Functional,System Testing,Critical,High Priority,"Verify the CI pipeline fails when a pull request contains a syntactically invalid JSON file.","CI linting workflow (`validation.yml`) is implemented and configured to run on pull requests.","1. Create a new branch.
2. Edit an existing JSON file (e.g., `custom_events.json`) to introduce a syntax error (e.g., a missing comma).
3. Commit the change and create a pull request.
4. Observe the CI pipeline execution.","The CI pipeline run for the pull request must fail at the JSON linting step, and the PR merge must be blocked.","A JSON file with a deliberate syntax error.","Git, GitHub/CI Platform","0.5","TASK-ANA-010"
CI-LINT-002,Automated Linting (US-005),Functional,System Testing,Critical,High Priority,"Verify the CI pipeline fails when a pull request contains a syntactically invalid YAML file.","CI linting workflow (`validation.yml`) is implemented and configured to run on pull requests.","1. Create a new branch.
2. Edit `config/analytics_configuration.yaml` to introduce a syntax error (e.g., incorrect indentation).
3. Commit the change and create a pull request.
4. Observe the CI pipeline execution.","The CI pipeline run for the pull request must fail at the YAML linting step, and the PR merge must be blocked.","A YAML file with a deliberate syntax error.","Git, GitHub/CI Platform","0.5","TASK-ANA-010"
CI-LINT-003,Automated Linting (US-005),Functional,Smoke Testing,Critical,High Priority,"Verify the CI pipeline passes when all JSON and YAML files are syntactically correct.","CI linting workflow (`validation.yml`) is implemented and configured to run on pull requests. The files in the main branch are known to be valid.","1. Create a new branch.
2. Make a trivial, valid change to a file (e.g., add a comment).
3. Commit the change and create a pull request.
4. Observe the CI pipeline execution.","The CI pipeline run must complete successfully, with the linting step showing a 'pass' status.","N/A","Git, GitHub/CI Platform","0.25","TASK-ANA-010"
VAL-UNIT-001,Cross-Schema Consistency (US-006),Functional,Unit Testing,Critical,High Priority,"Unit test for validator script: Verify it correctly identifies a parameter missing from the privacy map.","Python validation script (`validator.py`) exists. Pytest framework is set up.","1. In a test function, create mock JSON content for `custom_events.json` containing a parameter 'test_param'.
2. Create mock JSON content for `privacy_compliance_map.json` that does NOT contain 'test_param' in its `parameter_map`.
3. Run the validator's core logic function with these mock inputs.","The function must return an error/non-zero status and an error message that explicitly names 'test_param' as missing from the privacy map.","Mock JSON data representing the inconsistent state.","Python, Pytest","1.0","TASK-ANA-012"
VAL-UNIT-002,Cross-Schema Consistency (US-006),Functional,Unit Testing,Critical,High Priority,"Unit test for validator script: Verify it correctly identifies a parameter in the privacy map that is not in any schema.","Python validation script (`validator.py`) exists. Pytest framework is set up.","1. Create mock JSON content for `custom_events.json` that does NOT contain a parameter 'orphan_param'.
2. Create mock JSON content for `privacy_compliance_map.json` that DOES contain 'orphan_param' in its `parameter_map`.
3. Run the validator's core logic function with these mock inputs.","The function must return an error/non-zero status and an error message that explicitly names 'orphan_param' as an orphan key in the privacy map.","Mock JSON data representing the inconsistent state.","Python, Pytest","1.0","TASK-ANA-012"
VAL-UNIT-003,Cross-Schema Consistency (US-006),Functional,Unit Testing,Critical,High Priority,"Unit test for validator script: Verify it correctly identifies a user property missing from the privacy map.","Python validation script (`validator.py`) exists. Pytest framework is set up.","1. Create mock JSON content for `user_properties.json` containing a property 'test_prop'.
2. Create mock JSON content for `privacy_compliance_map.json` that does NOT contain 'test_prop' in its `user_property_map`.
3. Run the validator's core logic function with these mock inputs.","The function must return an error/non-zero status and an error message that explicitly names 'test_prop' as missing from the privacy map.","Mock JSON data representing the inconsistent state.","Python, Pytest","1.0","TASK-ANA-012"
VAL-UNIT-004,Cross-Schema Consistency (US-006),Functional,Unit Testing,High,High Priority,"Unit test for validator script: Verify it passes when all schemas and maps are perfectly consistent.","Python validation script (`validator.py`) exists. Pytest framework is set up.","1. Create mock JSON content for all three files (`custom_events`, `user_properties`, `privacy_compliance_map`) that are internally consistent.
2. Run the validator's core logic function with these mock inputs.","The function must return a success/zero status and produce no error messages.","Mock JSON data representing a consistent state.","Python, Pytest","0.5","TASK-ANA-012"
CI-CONSIST-001,Cross-Schema Consistency (US-006),Functional,Integration Testing,Critical,High Priority,"End-to-end test: Verify the CI pipeline fails when a new event parameter is added without a corresponding entry in the privacy map.","CI pipeline is configured to run the `validator.py` script on pull requests.","1. Create a new branch.
2. Edit `schemas/custom_events.json` to add a new parameter to an existing event.
3. Do not modify `schemas/privacy_compliance_map.json`.
4. Commit and create a pull request.
5. Observe the CI pipeline.","The CI pipeline must fail at the 'Consistency Check' step, and the merge must be blocked. The logs should clearly state which parameter is missing from the map.","Modified `custom_events.json` file.","Git, GitHub/CI Platform","0.5","TASK-ANA-014"
CI-CONSIST-002,Cross-Schema Consistency (US-006),Functional,Integration Testing,Critical,High Priority,"End-to-end test: Verify the CI pipeline fails when a key is added to the privacy map that doesn't exist in the schemas.","CI pipeline is configured to run the `validator.py` script on pull requests.","1. Create a new branch.
2. Edit `schemas/privacy_compliance_map.json` to add a new key ('non_existent_param') to the `parameter_map`.
3. Do not modify `schemas/custom_events.json`.
4. Commit and create a pull request.
5. Observe the CI pipeline.","The CI pipeline must fail at the 'Consistency Check' step, and the merge must be blocked. The logs should clearly state that 'non_existent_param' is an orphan key.","Modified `privacy_compliance_map.json` file.","Git, GitHub/CI Platform","0.5","TASK-ANA-014"
CI-CONSIST-003,Cross-Schema Consistency (US-006),Functional,Regression Testing,Critical,High Priority,"End-to-end test: Verify the CI pipeline passes when schemas are modified consistently.","CI pipeline is configured to run the `validator.py` script on pull requests.","1. Create a new branch.
2. Edit `schemas/custom_events.json` to add a new parameter 'new_test_param'.
3. Edit `schemas/privacy_compliance_map.json` to add 'new_test_param' to the `parameter_map`.
4. Commit and create a pull request.
5. Observe the CI pipeline.","The CI pipeline, including both linting and the consistency check, must pass successfully.","Modified `custom_events.json` and `privacy_compliance_map.json` files.","Git, GitHub/CI Platform","0.5","TASK-ANA-014"
DOC-README-001,Repository README (US-007),Functional,User Acceptance Testing,High,Manual Only,"Review README.md for clarity on repository purpose and file descriptions.","A draft of `README.md` is available for review in a pull request.","1. Read the `README.md` file.
2. Assess if the purpose of the repository is clearly explained.
3. Verify that there is a section describing the role of each of the four key configuration and schema files.","The README must be clear, concise, and accurately describe the repository's purpose and the function of `analytics_configuration.yaml`, `custom_events.json`, `user_properties.json`, and `privacy_compliance_map.json`.","`README.md` draft.","Git, Text Editor/IDE","0.5","TASK-ANA-016"
DOC-CONTRIB-001,Contribution Process (US-008),Functional,User Acceptance Testing,High,Manual Only,"Review CONTRIBUTING.md for a clear, step-by-step PR process.","A draft of `CONTRIBUTING.md` is available for review in a pull request.","1. Read the `CONTRIBUTING.md` file from the perspective of a new contributor.
2. Follow the documented steps for proposing a change.
3. Verify that the guide includes details on branching, PR creation, and CI checks.","The document must provide an unambiguous, step-by-step guide that a developer can follow to create a compliant pull request.","`CONTRIBUTING.md` draft.","Git, Text Editor/IDE","0.5","TASK-ANA-018"
DOC-CONTRIB-002,Contribution Process (US-008),Functional,User Acceptance Testing,High,Manual Only,"Verify CONTRIBUTING.md defines reviewer roles and the definition of 'done'.","A draft of `CONTRIBUTING.md` is available for review in a pull request.","1. Read the `CONTRIBUTING.md` file.
2. Find the section on the review process.
3. Confirm that it specifies who needs to review changes (e.g., client dev, data analyst).
4. Confirm that it explicitly states that passing all CI checks and receiving required approvals constitutes 'done'.","The document must clearly state the roles/stakeholders required for review and define the conditions for a PR to be considered ready for merge.","`CONTRIBUTING.md` draft.","Git, Text Editor/IDE","0.5","TASK-ANA-018"