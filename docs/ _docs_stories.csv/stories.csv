story_id,epic,title,user_role,description,priority,story_points,dependencies,acceptance_criteria_1,acceptance_criteria_2,acceptance_criteria_3,technical_tasks,definition_of_done
US-101,"Event Contract Definition and Implementation",Define Session Start Analytics Event,Data Analyst,"As a Data Analyst, I want a defined contract for the 'session_start' event, so that I can segment user sessions by application version, platform, and device to understand our user base's technical profile.",Must Have,3,"","Given a valid 'session_start' event payload, when it is validated against the SessionStartEvent.json schema, then the validation succeeds.","Given a 'session_start' event payload missing a required field like 'platform', when it is validated against the schema, then the validation fails.","Given a 'session_start' event payload with an incorrect data type (e.g., app_version as a number), when it is validated against the schema, then the validation fails.","Create the EventDefinitions/SessionStartEvent.json schema file according to Draft 7 standard. Define properties: eventName, playerId, appVersion, platform, deviceModel, osVersion. Set eventName as a constant 'session_start'.",The SessionStartEvent.json schema is created, passes all contract tests, and is merged to the main branch.
US-102,"Event Contract Definition and Implementation",Define Level Start Analytics Event,Game Designer,"As a Game Designer, I want a defined contract for the 'level_start' event, so that I can track which levels players are starting and analyze progression funnels based on level type, difficulty, and grid size.",Must Have,3,"","Given a valid 'level_start' event payload with all required fields, when it is validated against the LevelStartEvent.json schema, then the validation succeeds.","Given a 'level_start' event payload missing the required 'levelId' field, when it is validated against the schema, then the validation fails.","Given a 'level_start' event payload where 'difficulty' is a string instead of an integer, when it is validated against the schema, then the validation fails.","Create the EventDefinitions/LevelStartEvent.json schema file. Define properties: levelId, levelType, difficulty (integer), and gridSize. Set eventName as a constant 'level_start'.",The LevelStartEvent.json schema is created, passes all contract tests, and is merged to the main branch.
US-103,"Event Contract Definition and Implementation",Define Level Outcome Analytics Event,Game Designer,"As a Game Designer, I want a defined contract for the 'level_outcome' event, so that I can analyze level completion rates, failure reasons, and time/moves taken to balance game difficulty.",Must Have,8,"","Given a 'level_outcome' payload with outcome='complete', when it contains 'score' and 'stars_awarded' and is validated against the schema, then the validation succeeds.","Given a 'level_outcome' payload with outcome='fail', when it contains 'failure_reason' and is validated against the schema, then the validation succeeds.","Given a 'level_outcome' payload with outcome='complete' but is missing the 'score' field, when it is validated against the schema, then the validation fails.","Create the EventDefinitions/LevelOutcomeEvent.json schema. Implement an enum for 'outcome' ('complete', 'fail', 'quit'). Use 'if/then' JSON schema constructs to enforce that 'score' and 'stars_awarded' are required when outcome is 'complete', and 'failure_reason' is required when outcome is 'fail'.",The LevelOutcomeEvent.json schema with conditional logic is created, passes all contract tests for all outcome types, and is merged to the main branch.
US-104,"Event Contract Definition and Implementation",Define Player Action Analytics Event,Game Designer,"As a Game Designer, I want a defined contract for the 'player_action_used' event, so that I can measure the usage of assistance mechanics (like hint and undo) to identify player friction points in levels.",Must Have,3,"","Given a 'player_action_used' payload where 'actionType' is 'hint' or 'undo', when it is validated against the PlayerActionUsedEvent.json schema, then the validation succeeds.","Given a 'player_action_used' payload where 'actionType' is an invalid value like 'skip', when it is validated against the schema, then the validation fails.","Given a 'player_action_used' payload missing the required 'levelId' field, when it is validated against the schema, then the validation fails.","Create the EventDefinitions/PlayerActionUsedEvent.json schema. Define properties: levelId, actionType, and movesAtAction. Use a JSON schema 'enum' to restrict 'actionType' to 'hint' and 'undo'.",The PlayerActionUsedEvent.json schema is created, passes all contract tests, and is merged to the main branch.
US-105,"Event Contract Definition and Implementation",Define Client Error Analytics Event,Developer,"As a Developer, I want a defined contract for the 'client_error' event, so that I can receive structured, non-PII error data from clients to monitor application stability and prioritize bug fixes.",Must Have,3,"","Given a valid 'client_error' payload with a SHA256 hash for 'stackTraceHash', when it is validated against the ClientErrorEvent.json schema, then the validation succeeds.","Given a 'client_error' payload where 'stackTraceHash' is not a 64-character hex string, when it is validated against the schema, then the validation fails.","Given a 'client_error' payload missing the required 'errorType' field, when it is validated against the schema, then the validation fails.","Create the EventDefinitions/ClientErrorEvent.json schema. Define properties: errorType, errorContext, and stackTraceHash. Use a regex pattern like '^[a-fA-F0-9]{64}$' to validate the format of 'stackTraceHash'.",The ClientErrorEvent.json schema is created, passes all contract tests, and is merged to the main branch.
US-106,"Repository Tooling and Quality Assurance",Set up Schema Validation Tooling,Developer,"As a Developer working on data contracts, I want a Node.js project environment with standard testing tools, so that I can easily write and run automated tests to validate the schemas.",Should Have,2,"","Given the repository is cloned, when I run 'npm install' in the command line, then all development dependencies like 'ajv' and 'jest' are installed without errors.","Given the project is set up, when I run 'npm test', then the test runner executes, even if there are no tests yet.","Given the project, when I check the package.json file, then a 'test' script is defined.","Initialize an npm project with 'npm init'. Install 'ajv', 'jest' (or mocha) as dev dependencies. Configure the 'scripts' section in package.json to have a 'test' command that runs the chosen test runner.",The package.json and package-lock.json files are created and merged, and `npm install` and `npm test` commands are executable.
US-107,"Repository Tooling and Quality Assurance",Implement Contract Test Suite,Developer,"As a Developer, I want a comprehensive automated test suite for our data contracts, so that I can ensure any changes to a schema are correct and do not introduce regressions before they are merged.",Should Have,8,"US-101,US-102,US-103,US-104,US-105,US-106","Given a set of valid example payloads for all event schemas, when the 'npm test' command is run, then all tests pass, confirming the schemas correctly validate the payloads.","Given a set of invalid example payloads (e.g., missing fields, wrong data types) for all event schemas, when the 'npm test' command is run, then all tests pass, confirming the schemas correctly reject the payloads.","Given a change to a schema that makes it invalid, when the 'npm test' command is run, then the test suite fails, preventing the change from being merged.","Create test files (e.g., tests/contract.test.js). For each event schema, load it and create test cases using example JSON payloads. Use 'ajv' to validate the payloads against the schemas and assert the expected outcomes (valid/invalid).",A test suite exists that covers all defined schemas with both valid and invalid examples. The suite is executed via `npm test` and passes successfully.
US-108,"Repository Tooling and Quality Assurance",Automate Schema Validation in CI Pipeline,Developer,"As a Developer, I want a CI pipeline that automatically runs the contract test suite on every pull request, so that we can enforce schema quality and prevent invalid contracts from being merged into the main branch.",Should Have,5,US-107,"Given a pull request is opened with a valid change to a schema file, when the CI pipeline completes, then it shows a 'success' or 'passed' status.","Given a pull request is opened with an invalid change to a schema file (e.g., syntax error), when the CI pipeline runs the test suite, then it fails and blocks the PR from being merged.","Given a pull request is opened where a schema is changed but the tests are not updated, when the CI pipeline runs the test suite, then it fails if the change breaks an existing test.","Create a .github/workflows/validation.yml file. Configure the workflow to trigger on 'pull_request'. Define steps to checkout code, setup Node.js, run 'npm install', and execute 'npm test'. Ensure the pipeline job fails if the test command returns a non-zero exit code.",The CI pipeline is configured in the repository, automatically runs on all pull requests, and correctly reports success or failure based on the test suite results.
US-109,"Governance and Documentation",Document Repository Purpose and Usage,Client Developer,"As a Client Developer implementing analytics, I want a comprehensive README file, so that I can quickly understand the purpose of the analytics contracts, find the event I need, and understand the core principles I must follow.",Should Have,3,"","Given I open the repository's README.md file, when I read it, then I can clearly understand that this repository defines data contracts for Firebase Analytics.","Given I am looking for a specific event, when I scan the README, then I can find a list of all defined events with brief descriptions.","Given I am implementing the analytics client, when I read the README, then I am made aware of the core compliance principles like User Consent and Data Anonymization.","Author a README.md file in Markdown. Include sections for: Purpose, Core Principles (Anonymization, Consent), List of Events (with links to the schema files), and How to Use.",A complete README.md file is created and merged, accurately reflecting the repository's content and guidelines from the SDS.
US-110,"Governance and Documentation",Document Contribution and Versioning Process,Developer,"As a Developer wanting to propose a change to an event, I want a clear contribution guide, so that I understand the process for submitting changes, the versioning strategy, and the implications of my changes.",Should Have,3,"","Given I want to propose a new event, when I read CONTRIBUTING.md, then the process of creating a schema and submitting a Pull Request is clearly explained.","Given I am making a change to an existing schema, when I read CONTRIBUTING.md, then I can understand how to version my change according to Semantic Versioning for schemas (Major, Minor, Patch).","Given my PR is submitted, when I read CONTRIBUTING.md, then I understand the review and approval process that will follow.","Author a CONTRIBUTING.md file. Define the contribution workflow (fork, branch, PR). Define the versioning strategy (e.g., MAJOR for breaking changes, MINOR for new fields, PATCH for documentation). Outline the code review requirements.",A CONTRIBUTING.md file is created and merged, clearly defining the governance process for schema changes.
US-111,"Firebase Project Setup and Configuration",Configure Analytics Backend for Custom Events,Data Analyst,"As a Data Analyst, I want the Firebase Analytics backend to be configured with all custom events and parameters, so that incoming data is correctly processed and available for reporting and segmentation in the Firebase console.",Should Have,5,"US-101,US-102,US-103,US-104,US-105","Given I navigate to the 'Custom Definitions' section in the Firebase Analytics console, when I view the custom events, then I see 'level_start', 'level_outcome', and all other defined events.","Given I inspect the custom parameters for the 'level_outcome' event, when I view the registered parameters, then I see 'time_taken_seconds' and 'moves_taken' registered with the 'Number' data type.","Given I check the project settings, when I view the integrations, then the link to a BigQuery project is enabled and active.","In the Firebase Console, navigate to Analytics -> Custom Definitions. Register each event name (e.g., 'level_outcome'). For each event, register its custom parameters, ensuring the name and data type (Text/Number) match the schemas. Enable the Firebase to BigQuery integration.",All custom events and parameters are registered in Firebase. The BigQuery link is enabled. Screenshots or a configuration checklist are provided as evidence.