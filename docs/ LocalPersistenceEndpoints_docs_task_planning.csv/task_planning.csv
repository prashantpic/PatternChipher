Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Setup C# Project, Folders, and Dependencies","Initialize a new C# Class Library project targeting .NET Standard 2.1. Create the full directory structure as specified in the SDS. Add the `Newtonsoft.Json` package reference and the test project reference.","Configuration","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",3.2,"setup,configuration","Sprint 1: Core Components & Security","Core Persistence Framework & Interfaces","LocalPersistenceEndpoints","","AC: The `.csproj` file targets .NET Standard 2.1. A `PackageReference` for `Newtonsoft.Json` is added. The specified folder structure (`Interfaces`, `Repositories`, `Security`, etc.) is created and committed. The solution builds successfully.","US-001","","2024-09-02 09:00","2024-09-02 09:00",".NET CLI,Visual Studio"
"Define All Core Service Interfaces","Create C# files for all specified interfaces: `IPersistenceService`, `IFileRepository`, `IDataProtector`, `IMigrationService`, `IMigrationScript`, `IJsonSerializer`. All method and property signatures must match the SDS exactly.","Development","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",5.2,"interface,architecture","Sprint 1: Core Components & Security","Core Persistence Framework & Interfaces","LocalPersistenceEndpoints","","AC: Each interface is in its own file within the correct namespace. All method and property signatures are identical to the SDS. The project compiles without errors after adding the interfaces.","US-001","TASK-PERSIST-001","2024-09-02 09:00","2024-09-02 09:00","C#"
"Implement Data Models and Custom Exception","Create the `SaveDataWrapper.cs` POCO class and the `SaveDataCorruptionException.cs` custom exception class. The exception should inherit from `System.Exception` and include standard constructors.","Development","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",3,"model,dto,exception","Sprint 1: Core Components & Security","Core Persistence Framework & Interfaces","LocalPersistenceEndpoints","","AC: `SaveDataWrapper.cs` is created with `SchemaVersion` and `Payload` properties. `SaveDataCorruptionException.cs` is created, inherits `System.Exception`, and has `(string message)` and `(string message, Exception innerException)` constructors.","US-001","TASK-PERSIST-001","2024-09-02 09:00","2024-09-02 09:00","C#"
"Initialize Test Project","Create the associated NUnit test project `PatternCipher.Infrastructure.Persistence.Tests`. Add references to the main project and mocking libraries (Moq).","Testing","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",2.2,"testing,setup","Sprint 1: Core Components & Security","Core Persistence Framework & Interfaces","LocalPersistenceEndpoints","","AC: The test project is created and correctly references the main persistence project. NUnit and Moq packages are added. A placeholder test runs successfully.","US-001","TASK-PERSIST-001","2024-09-02 09:00","2024-09-02 09:00",".NET CLI,NUnit"
"Implement `NewtonsoftJsonSerializer`","Create the concrete implementation of `IJsonSerializer` as a thin wrapper around `Newtonsoft.Json.JsonConvert.SerializeObject` and `DeserializeObject<T>`.","Development","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",3.2,"serialization,wrapper","Sprint 1: Core Components & Security","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: Class implements all methods of `IJsonSerializer`. `Serialize` method correctly converts an object to a JSON string. `Deserialize<T>` method correctly converts a JSON string to an object of type T.","US-002","TASK-PERSIST-002","2024-09-02 09:00","2024-09-02 09:00","C#,Newtonsoft.Json"
"Unit Test `NewtonsoftJsonSerializer`","Write unit tests to verify the serialization and deserialization of a sample POCO, including handling of nulls and empty objects.","Testing","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",4.2,"unit-test,serialization","Sprint 1: Core Components & Security","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: A test verifies that a complex object is serialized to a correct JSON string. A test verifies that a JSON string is deserialized back to an object with correct values. Tests pass successfully in the CI pipeline.","US-002","TASK-PERSIST-004,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit"
"Implement `LocalFileRepository`","Implement `IFileRepository` using `System.IO.File`. Critically, `ReadAllTextAsync` and `WriteAllTextAsync` must wrap the synchronous `File` calls in `Task.Run()` to offload the I/O from the calling thread.","Development","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",6.3,"repository,file-io,async","Sprint 1: Core Components & Security","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: Class implements all methods of `IFileRepository`. Async methods use `Task.Run` to wrap synchronous `System.IO.File` calls. File paths are constructed using `Path.Combine` and a base path (e.g., a temp directory for testing).","US-003","TASK-PERSIST-002","2024-09-02 09:00","2024-09-02 09:00","C#,async/await,System.IO"
"Unit Test `LocalFileRepository`","Write unit tests that verify file read, write, exists, and delete operations. Tests will interact with the actual file system in a temporary directory created during test setup and torn down afterwards.","Testing","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",7.5,"unit-test,file-io,integration-test-light","Sprint 1: Core Components & Security","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: Test setup creates a temporary directory. Tests verify `WriteAllTextAsync` and `ReadAllTextAsync` roundtrip. Tests verify `FileExists` and `DeleteFile` methods work as expected. Test teardown successfully cleans up all created files and directories.","US-003","TASK-PERSIST-006,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit,System.IO"
"Implement `SimpleXorDataProtector.Protect` method","Implement the data protection logic: compute SHA256 hash of input JSON, create a `{hash}:{jsonData}` string, apply a byte-by-byte XOR operation with a secret key, and return the Base64 encoded result.","Development","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",8.2,"security,crypto,obfuscation","Sprint 1: Core Components & Security","Data Security and Integrity","LocalPersistenceEndpoints","","AC: `SHA256.ComputeHash` is used correctly. The XOR cipher logic correctly processes all bytes. The final output is a valid Base64 string. The secret key is constructed at runtime, not a simple string literal.","US-004","TASK-PERSIST-002,TASK-PERSIST-003","2024-09-02 09:00","2024-09-02 09:00","C#,System.Security.Cryptography,System.Text"
"Implement `SimpleXorDataProtector.Unprotect` method","Implement the reversal of the Protect logic: Base64 decode, apply XOR, split the string to separate hash and data, re-compute the hash of the data, and compare. Throw `SaveDataCorruptionException` if hashes don't match or format is invalid.","Development","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",8.2,"security,validation,checksum","Sprint 1: Core Components & Security","Data Security and Integrity","LocalPersistenceEndpoints","","AC: The XOR cipher is correctly reversed. The string is split correctly to extract the original hash and JSON payload. The hash of the extracted payload is re-computed. `SaveDataCorruptionException` is thrown if the re-computed hash does not match the original hash. The clean JSON is returned on success.","US-004","TASK-PERSIST-008","2024-09-02 09:00","2024-09-02 09:00","C#,System.Security.Cryptography"
"Unit Test `SimpleXorDataProtector` Roundtrip","Write a unit test that takes a sample JSON string, runs it through `Protect`, then runs the result through `Unprotect`, and asserts that the final output is identical to the original input.","Testing","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",5,"unit-test,security,happy-path","Sprint 1: Core Components & Security","Data Security and Integrity","LocalPersistenceEndpoints","","AC: A test successfully verifies the protect-unprotect cycle for a non-empty string. A test successfully verifies the cycle for an empty string. Tests pass in CI.","US-004","TASK-PERSIST-009,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit"
"Unit Test `SimpleXorDataProtector` Tamper Detection","Write unit tests that simulate tampered data. Protect a string, modify the Base64 result slightly (e.g., change one character), and assert that `Unprotect` throws `SaveDataCorruptionException`.","Testing","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",10.2,"unit-test,security,failure-path,validation","Sprint 1: Core Components & Security","Data Security and Integrity","LocalPersistenceEndpoints","","AC: A test with a modified payload but correct Base64 encoding throws `SaveDataCorruptionException`. A test with invalid Base64 string throws a `FormatException` (or is handled gracefully). A test with a valid payload but an invalid hash manually inserted throws `SaveDataCorruptionException`. Tests pass in CI.","US-004","TASK-PERSIST-010","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit"
"Implement `MigrationService`","Implement `IMigrationService`. The constructor receives an `IEnumerable<IMigrationScript>` and sorts them by `SourceVersion`. `MigrateToCurrentVersion` logic will loop from the data's version up to the current app version, finding and applying the correct script at each step. It must handle missing scripts and update the version number on the `JObject`.","Development","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",10.3,"migration,orchestration,strategy-pattern","Sprint 1: Core Components & Security","Data Schema Migration System","LocalPersistenceEndpoints","","AC: The constructor correctly sorts migration scripts. The `MigrateToCurrentVersion` method correctly identifies the starting version from the `JObject`. The method successfully applies a sequence of scripts in the correct order. The method throws an exception if a script for an intermediate version is not found. The `save_schema_version` property in the `JObject` is updated to the current version upon completion.","US-005","TASK-PERSIST-002","2024-09-02 09:00","2024-09-02 09:00","C#,LINQ,Newtonsoft.Json.Linq"
"Implement Example `MigrationScript_V1_to_V2`","Create a concrete `IMigrationScript` for migrating from V1 to V2. The `SourceVersion` property will return 1. The `Apply` method will perform a simple transformation on a `JObject`, like renaming `totalScore` to `cumulativeScore`.","Development","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",5,"migration,script","Sprint 1: Core Components & Security","Data Schema Migration System","LocalPersistenceEndpoints","","AC: `SourceVersion` property returns `1`. `Apply` method correctly finds the `totalScore` token, adds a new `cumulativeScore` property with the same value, and removes the old `totalScore` property.","US-005","TASK-PERSIST-002","2024-09-02 09:00","2024-09-02 09:00","C#,Newtonsoft.Json.Linq"
"Unit Test `MigrationService` Scenarios","Write unit tests for the `MigrationService`. Create mock `IMigrationScript` objects. Test the scenarios: no migration needed, single migration step, multi-step migration, and a broken chain (missing script).","Testing","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",12,"unit-test,migration,orchestration","Sprint 2: Orchestration & Finalization","Data Schema Migration System","LocalPersistenceEndpoints","","AC: A test with current-version data confirms no scripts are called. A test with V1 data confirms the V1->V2 script is called and the version is updated to 2. A test with V1 data and scripts for V1->V2 and V2->V3 confirms both are called in order and the final version is 3. A test with V1 data and only a V2->V3 script throws an exception.","US-005","TASK-PERSIST-012,TASK-PERSIST-013,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit,Moq,Newtonsoft.Json.Linq"
"Implement `PersistenceService.SavePlayerProfileAsync`","Implement the save logic orchestration in `PersistenceService`. This method will sequence calls to the injected dependencies: `_serializer.Serialize(playerProfile)`, `_dataProtector.Protect()`, create `SaveDataWrapper`, `_serializer.Serialize(wrapper)`, and `_repository.WriteAllTextAsync()`.","Development","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",7,"service,orchestration,facade","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: The method correctly calls its dependencies in the specified order. The `SaveDataWrapper` is correctly populated with the current schema version and the protected payload. The final serialized wrapper is passed to the file repository for writing.","US-006","TASK-PERSIST-002,TASK-PERSIST-003","2024-09-02 09:00","2024-09-02 09:00","C#,async/await"
"Unit Test `PersistenceService.SavePlayerProfileAsync`","Write unit tests for the save method. Mock all dependencies (`IFileRepository`, `IDataProtector`, `IJsonSerializer`) to verify that the service calls them in the correct order and with the expected data.","Testing","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",7.5,"unit-test,mocking","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: `Mock<IJsonSerializer>`'s `Serialize` method is called twice. `Mock<IDataProtector>`'s `Protect` method is called once with the serialized profile. `Mock<IFileRepository>`'s `WriteAllTextAsync` is called once with the final serialized wrapper. Tests pass in CI.","US-006","TASK-PERSIST-016,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit,Moq"
"Implement `PersistenceService.LoadPlayerProfileAsync`","Implement the load logic orchestration. This is the most complex method, involving a sequence of repository->read, serializer->deserialize wrapper, protector->unprotect, parse to JObject, migrationService->migrate, and finally serializer->deserialize profile. Must include a robust try-catch block.","Development","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",12,"service,orchestration,facade,error-handling","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: If file does not exist, a new default `PlayerProfile` is returned immediately. A try-catch block surrounds the core logic to handle `SaveDataCorruptionException` and other errors. On any exception, an error is logged (to a mock logger) and a new `PlayerProfile` is returned. Dependencies are called in the correct sequence for the happy path.","US-007","TASK-PERSIST-016","2024-09-02 09:00","2024-09-02 09:00","C#,async/await,Newtonsoft.Json.Linq"
"Unit Test `LoadPlayerProfileAsync` Happy Path","Write unit tests for the successful load scenario. Mock dependencies to return valid data at each step, and verify that the final, correctly deserialized `PlayerProfile` is returned.","Testing","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",6,"unit-test,mocking","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: Mocks are set up to simulate a valid, up-to-date save file. The test verifies that all dependencies are called in the correct order. The test asserts that the returned `PlayerProfile` object contains the expected data.","US-007","TASK-PERSIST-018,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit,Moq"
"Unit Test `LoadPlayerProfileAsync` Failure & Edge Cases","Write unit tests for all failure and edge-case scenarios: file not found, `Unprotect` throws `SaveDataCorruptionException`, `MigrationService` fails, and a migration is required.","Testing","Backlog","Critical","dev@patterncipher.com","pm@patterncipher.com","",11.2,"unit-test,mocking,error-handling","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: A test where `_repository.FileExists` returns false results in a new `PlayerProfile`. A test where `_dataProtector.Unprotect` throws `SaveDataCorruptionException` results in a new `PlayerProfile`. A test simulating an old schema version verifies that `_migrationService.MigrateToCurrentVersion` is called. All failure-path tests assert that a new default `PlayerProfile` is returned.","US-007","TASK-PERSIST-018,TASK-PERSIST-019","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit,Moq"
"Implement Automatic Pre-Migration Backup","Modify the `PersistenceService.LoadPlayerProfileAsync` method to include a step that creates a backup of the save file (e.g., `player_profile.dat.bak`) before initiating the migration process.","Development","Backlog","High","dev@patterncipher.com","pm@patterncipher.com","",4.2,"risk-mitigation,backup,resilience","Sprint 2: Orchestration & Finalization","Data Schema Migration System","LocalPersistenceEndpoints","","AC: Before `_migrationService` is called, a call to `_repository.CopyFile` (a new method to be added) is made. If migration fails, the service does NOT delete the backup. If migration succeeds, the service can optionally delete the backup file.","US-005","TASK-PERSIST-018","2024-09-02 09:00","2024-09-02 09:00","C#"
"Implement In-Progress State Methods in `PersistenceService`","Implement the four synchronous methods for in-progress state: `SaveInProgressState`, `LoadInProgressState`, `ClearInProgressState`, `HasInProgressState`. These will be simple, synchronous wrappers around `IJsonSerializer` and `IFileRepository`.","Development","Backlog","Medium","dev@patterncipher.com","pm@patterncipher.com","",7.2,"service,synchronous,state-management","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: `SaveInProgressState` performs a synchronous serialize and write. `LoadInProgressState` performs a synchronous read and deserialize, returning null on any error. `ClearInProgressState` synchronously deletes the file. `HasInProgressState` synchronously checks for file existence.","US-008","TASK-PERSIST-018","2024-09-02 09:00","2024-09-02 09:00","C#"
"Unit Test In-Progress State Methods","Write unit tests for the four in-progress state methods, using mocked dependencies to verify the correct synchronous calls are made to the serializer and repository.","Testing","Backlog","Medium","dev@patterncipher.com","pm@patterncipher.com","",8.5,"unit-test,mocking","Sprint 2: Orchestration & Finalization","Data Persistence Implementation","LocalPersistenceEndpoints","","AC: Test for `SaveInProgressState` verifies `Serialize` and a synchronous `Write` call on the repository. Test for `LoadInProgressState` verifies `Read` and `Deserialize`, and also the null-return path on exception. Test for `ClearInProgressState` verifies a synchronous `Delete` call. Test for `HasInProgressState` verifies the call to `FileExists`.","US-008","TASK-PERSIST-021,TASK-PERSIST-038","2024-09-02 09:00","2024-09-02 09:00","C#,NUnit,Moq"