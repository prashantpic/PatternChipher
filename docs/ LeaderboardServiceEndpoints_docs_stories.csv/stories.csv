story_id,epic,title,user_role,description,priority,story_points,dependencies,acceptance_criteria_1,acceptance_criteria_2,acceptance_criteria_3,technical_tasks,definition_of_done
US-LBS-001,"EPIC-LBS-01: Project Scaffolding and Core Configuration",Set Up Initial Project and Configuration,Developer,"As a Developer, I want to establish the basic project structure with dependency management and centralized constants, so that I have a clean, maintainable foundation for building the service.",Must Have,2,"","Given the project is checked out, When I run `npm install`, Then all dependencies and devDependencies from `package.json` are installed without errors.","Given the project is set up, When I inspect the `src/config/constants.ts` file, Then it exports the `FIRESTORE_COLLECTIONS`, `SCORE_VALIDATION_RULES`, and `RATE_LIMIT_CONFIG` objects.","Given the project is checked out, When I run `npm run build`, Then the TypeScript code is successfully transpiled into the `lib` directory without errors.","WI-LBS-001, WI-LBS-004","The `package.json` and `src/config/constants.ts` files are created and committed. All project dependencies are installable via npm."
US-LBS-002,"EPIC-LBS-01: Project Scaffolding and Core Configuration",Secure Leaderboard Data from Client-Side Tampering,Developer,"As a Developer, I want to configure Firestore security rules so that players cannot write directly to the leaderboard, ensuring all scores are submitted through the validated server endpoint for fairness.",Must Have,3,"","Given the Firestore security rules are deployed, When an unauthenticated or authenticated client attempts to read from the `/leaderboards/{any_doc}` path, Then the read operation is allowed.","Given the Firestore security rules are deployed, When a client attempts to perform a write operation (create, update, delete) on the `/leaderboards/{any_doc}` path, Then the write operation is denied.","Given a user is authenticated with a specific UID, When they attempt to create, read, or update the document at `/scoreSubmissions/{their_UID}`, Then the operation is allowed.","WI-LBS-002","The `firestore.rules` file is implemented as specified and deployed. Integration tests confirm that client-side writes to the leaderboards collection fail and reads succeed."
US-LBS-003,"EPIC-LBS-01: Project Scaffolding and Core Configuration",Optimize Leaderboard Query Performance,Developer,"As a Developer, I want to define composite indexes in Firestore so that client applications can query and sort leaderboards by score, moves, or time efficiently, providing a fast user experience.",Must Have,2,"","Given the Firestore indexes are deployed, When a query is made to the `leaderboards` collection filtering by `levelId` and sorting by `score` descending, Then the query executes successfully and efficiently.","Given the Firestore indexes are deployed, When a query is made to the `leaderboards` collection filtering by `levelId` and sorting by `moves` ascending, Then the query executes successfully and efficiently.","Given the Firestore indexes are deployed, When a query is made to the `leaderboards` collection filtering by `levelId` and sorting by `timeInSeconds` ascending, Then the query executes successfully and efficiently.","WI-LBS-003","The `firestore.indexes.json` file is created with the correct index definitions and deployed to the Firebase project. The Firebase console confirms the indexes are building or active."
US-LBS-004,"EPIC-LBS-02: Domain and Application Layer Implementation",Define Data Contracts for Score Submission,Developer,"As a Developer, I want to define the domain model for a leaderboard entry and the DTO for score submission, so that there is a clear, strongly-typed data contract for all parts of the application.",Must Have,3,US-LBS-001,"Given the domain model file, When I import `LeaderboardEntry`, Then it has all the required properties (`userId`, `userName`, `levelId`, `score`, `moves`, `timeInSeconds`, `submittedAt`).","Given the DTO file, When I import `SubmitScoreDto`, Then it has the properties `levelId`, `score`, `moves`, and `timeInSeconds`.","Given the DTO file and a valid score submission payload, When I validate the payload against the exported `submitScoreSchema` (Joi schema), Then the validation passes without error.","WI-LBS-005, WI-LBS-006","The `leaderboard-entry.model.ts` and `submit-score.dto.ts` files are created and committed. The defined interfaces and Joi schema match the SDS."
US-LBS-005,"EPIC-LBS-02: Domain and Application Layer Implementation",Implement Server-Side Score Plausibility Checks,Developer,"As a Developer, I want to implement a domain service that validates if a score is plausible, so that obviously cheated or bugged scores are rejected before they are saved to the leaderboard.",Must Have,3,"US-LBS-001, US-LBS-004","Given a `ScoreValidatorService` instance, When `isPlausible()` is called with a score, moves, and time that are all within the ranges defined in `constants.ts`, Then the method returns `true`.","Given a `ScoreValidatorService` instance, When `isPlausible()` is called with a score that is higher than `MAX_SCORE`, Then the method returns `false`.","Given a `ScoreValidatorService` instance, When `isPlausible()` is called with a time in seconds that is lower than `MIN_TIME_SECONDS`, Then the method returns `false`.","WI-LBS-007","The `score-validator.service.ts` file is created with passing unit tests that cover all plausibility rules defined in the constants."
US-LBS-006,"EPIC-LBS-03: Infrastructure and Endpoint Implementation",Implement Score Persistence Logic,Developer,"As a Developer, I want to implement a repository that handles writing leaderboard entries to Firestore, so that the application's business logic is cleanly separated from the database infrastructure.",Must Have,3,"US-LBS-001, US-LBS-004","Given a `LeaderboardRepository` instance initialized with a mock Firestore object, When the `submitScore` method is called with a valid `LeaderboardEntry` object, Then the repository calls the `add` method on the correct Firestore collection specified in `constants.ts`.","Given the Firebase initializer module, When it is imported, Then it calls `admin.initializeApp()` once and exports a valid Firestore `db` instance.","Given the repository is used in an integration test, When `submitScore` is called, Then a new document matching the `LeaderboardEntry` is created in the emulated Firestore database.","WI-LBS-009, WI-LBS-010","The `firebase.ts` initializer and `leaderboard.repository.ts` files are created and committed. Unit tests for the repository pass, mocking the Firestore dependency."
US-LBS-007,"EPIC-LBS-02: Domain and Application Layer Implementation",Orchestrate the Score Submission Use Case,Developer,"As a Developer, I want to create an application service that orchestrates the score submission process, so that the main endpoint logic remains clean and delegates business rules and data persistence to the correct components.",Must Have,5,"US-LBS-005, US-LBS-006","Given a `LeaderboardService` instance with mocked dependencies, When `handleScoreSubmission` is called with a DTO that the `ScoreValidatorService` deems implausible, Then the service throws an `HttpsError` with the code 'invalid-argument'.","Given a `LeaderboardService` instance with mocked dependencies, When `handleScoreSubmission` is called with a plausible DTO, Then it calls the `leaderboardRepository.submitScore` method once.","Given a `LeaderboardService` instance with mocked dependencies, When `handleScoreSubmission` is called with a plausible DTO, Then the `LeaderboardEntry` passed to the repository correctly maps the DTO data and includes the `userId` and `userName` from the auth context.","WI-LBS-008","The `leaderboard.service.ts` file is created and committed. Unit tests pass, verifying its orchestration logic with mocked validator and repository dependencies."
US-LBS-008,"EPIC-LBS-03: Infrastructure and Endpoint Implementation",Implement Secure Score Submission Endpoint,Developer,"As a Developer, I want to implement the main `https.onCall` cloud function for score submission, so that clients have a secure, authenticated, and validated endpoint to submit their scores.",Must Have,8,"US-LBS-004, US-LBS-007, US-LBS-009","Given the `submitScore` function is invoked without an authentication context, When the function executes, Then it throws an `HttpsError` with the code 'unauthenticated'.","Given a user is authenticated, When they invoke the `submitScore` function with a data payload that fails Joi validation (e.g., a missing field), Then the function throws an `HttpsError` with the code 'invalid-argument'.","Given a user is authenticated and not rate-limited, When they invoke `submitScore` with a valid and plausible score payload, Then the function completes successfully and returns `{ success: true, ... }`.","WI-LBS-011","The `index.ts` file is created, defining and exporting the `submitScore` function. Integration tests verify all authentication, validation, and success paths."
US-LBS-009,"EPIC-LBS-03: Infrastructure and Endpoint Implementation",Implement Anti-Abuse Rate Limiting,Developer,"As a Developer, I want to implement transactional rate-limiting on score submissions, so that a single user cannot flood the system with requests, ensuring service availability and preventing simple spam attacks.",Must Have,8,US-LBS-006,"Given a user has made `MAX_SUBMISSIONS - 1` submissions within the time window, When they make one more submission, Then the request is allowed and a new timestamp is written to their rate-limit document in Firestore.","Given a user has made `MAX_SUBMISSIONS` submissions within the time window, When they attempt another submission, Then the `enforceRateLimit` function throws an `HttpsError` with the code 'resource-exhausted'.","Given a user has no previous submissions, When they make their first submission, Then a new rate-limit document is created for them in Firestore with a single timestamp.","WI-LBS-012","The `enforceRateLimit` function is implemented within `index.ts` using a Firestore transaction. Integration tests verify that the limit is correctly enforced and that requests are allowed when under the limit."
US-LBS-010,"EPIC-LBS-04: Quality Assurance and Testing",Ensure Core Logic Correctness with Unit Tests,Developer,"As a Developer, I want to write comprehensive unit tests for the `ScoreValidatorService`, so that I can confidently refactor or extend the business rules while ensuring correctness.",Should Have,3,US-LBS-005,"Given the test suite for `ScoreValidatorService`, When a test case with a valid score is run, Then the test passes.","Given the test suite, When test cases for each boundary condition (min/max score, moves, time) are run, Then they all pass by correctly identifying the scores as implausible.","Given the test suite is run, When the code coverage report is generated, Then the coverage for `score-validator.service.ts` is above 95%.","WI-LBS-013","The `score-validator.service.test.ts` file is created and committed. The tests are integrated into the CI pipeline and must pass for a build to be considered successful."
US-LBS-011,"EPIC-LBS-04: Quality Assurance and Testing",Verify End-to-End Functionality with Integration Tests,Developer,"As a Developer, I want to write integration tests using the Firebase Emulator Suite, so that I can verify the entire request lifecycle, including authentication, validation, rate limiting, and database interactions.",Should Have,13,US-LBS-008,"Given the Firebase emulators are running, When an integration test calls the `submitScore` function with valid data, Then it asserts that a corresponding document is created in the emulated Firestore.","Given the emulators are running, When an integration test calls the function without auth or with an implausible score, Then it asserts that the correct `HttpsError` ('unauthenticated' or 'invalid-argument') is thrown.","Given the emulators are running, When an integration test calls the function more times than the rate limit allows, Then it asserts that a 'resource-exhausted' error is thrown on the final call.","WI-LBS-014","The `index.test.ts` file is created with integration tests covering success and failure scenarios. The tests run successfully against the local Firebase Emulator Suite."
US-LBS-012,"EPIC-LBS-05: CI/CD and Documentation",Automate Build and Deployment,DevOps Engineer,"As a DevOps Engineer, I want to set up a CI/CD pipeline for the leaderboard service, so that every change is automatically built, tested, and deployed, ensuring code quality and rapid, reliable delivery.",Should Have,8,"US-LBS-001, US-LBS-011","Given a developer creates a pull request, When the code is pushed, Then a CI workflow is triggered that runs the linter and all unit and integration tests.","Given a pull request has a failing test in the CI workflow, When a developer views the PR, Then merging is blocked until the tests are fixed.","Given a pull request is merged into the `main` branch, When the CD workflow completes, Then the new version of the `submitScore` function and its related rules are successfully deployed to the staging Firebase project.","WI-LBS-015","A CI/CD workflow file (e.g., in `.github/workflows`) is created and committed. The pipeline successfully executes on pull requests and deploys from the main branch."
US-LBS-013,"EPIC-LBS-05: CI/CD and Documentation",Document Repository for Developer Onboarding,Developer,"As a new Developer on the project, I want to read a comprehensive `README.md` file, so that I can quickly understand the service's purpose and set up my local development environment.",Could Have,3,"","Given I have cloned the repository, When I open the `README.md` file, Then I can find a clear explanation of what the service does.","Given I am setting up my local environment, When I follow the instructions in the README, Then I can successfully install all dependencies using `npm install`.","Given I want to run the service locally, When I follow the instructions in the README, Then I can successfully start the Firebase emulators and run the test suite.","WI-LBS-016","A `README.md` file is created at the root of the functions directory. The file contains all the sections specified in the acceptance criteria."