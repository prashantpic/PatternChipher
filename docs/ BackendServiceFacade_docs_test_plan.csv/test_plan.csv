test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TS-001,Build and Configuration,Functional,System,Critical,High,"Verify that the .csproj file is correctly configured and the project compiles within Unity.","The Unity project exists and the source code for the BackendServiceFacade repository is checked out.","1. Open the Unity project. 2. Allow Unity to resolve the UPM packages specified in the .csproj file. 3. Open the C# solution in an IDE (Rider/Visual Studio). 4. Build the `PatternCipher.Infrastructure.Firebase` project.","The project compiles successfully without any errors related to missing dependencies or incorrect framework versions. Firebase SDKs are listed as resolved packages. The reference to the Application/Domain project is resolved.","N/A","Unity Editor,IDE (Rider/VS),MSBuild",2,"TASK-001"
TS-002,Core/Utility,Functional,Unit,Critical,High,"Verify `FirebaseResult<T>.Success(value)` factory method creates a correct success state object.","`FirebaseResult<T>` class is implemented.","1. Define a sample data object (e.g., a string ""test""). 2. Call `FirebaseResult<string>.Success(""test"")`. 3. Assert that `result.IsSuccess` is true. 4. Assert that `result.Value` equals ""test"". 5. Assert that `result.Error` is null.","The assertions pass, confirming the object is in a valid success state.","Sample string, int, and a custom class object.","NUnit",0.5,"TASK-003"
TS-003,Core/Utility,Functional,Unit,Critical,High,"Verify `FirebaseResult<T>.Failure(error)` factory method creates a correct failure state object.","`FirebaseResult<T>` and `FirebaseError` classes are implemented.","1. Create a `FirebaseError` object. 2. Call `FirebaseResult<string>.Failure(error)`. 3. Assert that `result.IsSuccess` is false. 4. Assert that `result.Error` is the same object passed in. 5. Assert that `result.Value` is the default for the type (e.g., null for a string).","The assertions pass, confirming the object is in a valid failure state.","A sample FirebaseError object.","NUnit",0.5,"TASK-003"
TS-004,Core/Utility,Functional,Unit,Critical,High,"Verify `FirebaseError` constructor correctly assigns properties.","`FirebaseError` class is implemented.","1. Call `new FirebaseError(123, ""Test Error"", null)`. 2. Assert that `error.ErrorCode` is 123. 3. Assert that `error.Message` is ""Test Error"".","The assertions pass, confirming the error object is constructed correctly.","N/A","NUnit",0.5,"TASK-003"
TS-005,Core/Initialization,Functional,Integration,Critical,Manual Only,"Verify `FirebaseInitializer` successfully initializes on a target Android device with up-to-date Google Play Services.","An Android device with Developer Mode enabled is connected. The project is configured for Android builds. A test scene with the `FirebaseInitializer` script exists.","1. Build and run the test scene on the Android device. 2. Observe the application logs via `adb logcat`. 3. A test script in the scene should await `FirebaseInitializer.InitializeAsync()` and log the result.","The application starts without crashing. The logs show that Firebase initialization completed successfully, and the awaited task returns `true`. This test addresses RISK-001.","N/A","Unity Editor,Android SDK,Android Device",4,"TASK-006"
TS-006,Core/Initialization,Functional,Integration,Critical,Manual Only,"Verify `FirebaseInitializer` handles initialization failure gracefully on an Android device with missing/outdated Google Play Services.","An Android device (or emulator) is configured to have outdated or disabled Google Play Services. A test scene with `FirebaseInitializer` exists.","1. Build and run the test scene on the configured Android device/emulator. 2. Observe the application logs. 3. The test script should log the result of `FirebaseInitializer.InitializeAsync()`.","The application does not crash. An error message is logged to the console indicating the dependency issue. The `InitializeAsync` task completes and returns `false`. This test addresses RISK-001.","N/A","Unity Editor,Android SDK,Android Device/Emulator",3,"TASK-006"
TS-007,Core/Initialization,Functional,Unit,Critical,High,"Verify `FirebaseInitializer`'s `InitializeAsync` method only runs the initialization logic once, even if called multiple times concurrently.","`FirebaseInitializer` is implemented with the `TaskCompletionSource` pattern.","1. Create a mock for `Firebase.FirebaseApp`. 2. Call `FirebaseInitializer.InitializeAsync()` multiple times in quick succession without awaiting. 3. Await all the returned tasks. 4. Verify that the underlying `CheckAndFixDependenciesAsync()` on the mock was called exactly once. 5. Verify all awaited tasks complete with the same result.","The mock's `CheckAndFixDependenciesAsync()` method is verified to have been called only once. All tasks complete successfully.","Mock of `Firebase.FirebaseApp`","NUnit,Moq",1.5,"TASK-006"
TS-008,Cloud Save/Mapper,Functional,Unit,Critical,High,"Verify `PlayerProfileMapper` correctly maps from a domain object to a DTO.","`PlayerProfile` domain model, `PlayerProfileDto`, and `PlayerProfileMapper` are implemented.","1. Create a fully populated `PlayerProfile` domain object. 2. Call `PlayerProfileMapper.ToDto()` with the domain object. 3. Assert that every property in the resulting DTO matches the corresponding property in the source domain object.","All assertions pass, confirming a complete and accurate mapping. This test addresses RISK-007.","A complex `PlayerProfile` instance with nested objects.","NUnit",1,"TASK-015"
TS-009,Cloud Save/Mapper,Functional,Unit,Critical,High,"Verify `PlayerProfileMapper` correctly maps from a DTO to a domain object.","`PlayerProfile` domain model, `PlayerProfileDto`, and `PlayerProfileMapper` are implemented.","1. Create a fully populated `PlayerProfileDto` object. 2. Call `PlayerProfileMapper.ToDomain()` with the DTO. 3. Assert that every property in the resulting domain object matches the corresponding property in the source DTO.","All assertions pass, confirming a complete and accurate mapping. This test addresses RISK-007.","A complex `PlayerProfileDto` instance with nested objects.","NUnit",1,"TASK-015"
TS-010,Cloud Save/Mapper,Regression,Unit,High,High,"Verify `PlayerProfileMapper` does not miss any properties during mapping.","`PlayerProfile` domain model, `PlayerProfileDto`, and `PlayerProfileMapper` are implemented.","1. Use reflection to get all public property names from `PlayerProfile`. 2. Use reflection to get all public property names from `PlayerProfileDto`. 3. Assert that the two lists of names are equivalent (after accounting for any intentionally ignored properties).","The assertion passes, confirming that no properties have been missed in the DTO or domain model definitions, mitigating silent data loss. This test directly addresses RISK-007.","N/A","NUnit,Reflection",1.5,"TASK-016"
TS-011,Cloud Save/DTO,Static Analysis,System,Critical,High,"Verify `PlayerProfileDto` and its sub-DTOs have the required Firestore attributes.","DTO classes are implemented.","1. Statically analyze or manually review the `PlayerProfileDto` and related DTOs. 2. Check that the class has `[FirestoreData]`. 3. Check that every public property has `[FirestoreProperty]`. 4. Check that the `LastUpdated` property has `[ServerTimestamp]`.","All required attributes are present on the DTOs and their properties. This test addresses RISK-006 at a structural level.","N/A","IDE/Code Review",0.5,"TASK-013"
TS-012,Authentication,Functional,Unit,Critical,High,"Verify `FirebaseAuthAdapter.SignInAnonymouslyAsync` handles success correctly.","`FirebaseAuthAdapter` is implemented.","1. Mock `FirebaseAuth` so that `SignInAnonymouslyAsync()` returns a successful task with a mock `FirebaseUser`. 2. Call `adapter.SignInAnonymouslyAsync()`. 3. Await the result. 4. Assert that the returned `FirebaseResult` has `IsSuccess = true`. 5. Assert that the `Value` of the result contains the expected User ID from the mock user.","The method returns a successful `FirebaseResult` containing the correct User ID. This test addresses RISK-002 and RISK-004.","Mock of `FirebaseAuth`, mock of `FirebaseUser`.","NUnit,Moq",1.5,"TASK-011"
TS-013,Authentication,Functional,Unit,Critical,High,"Verify `FirebaseAuthAdapter.SignInAnonymouslyAsync` handles failure correctly.","`FirebaseAuthAdapter` is implemented.","1. Mock `FirebaseAuth` so that `SignInAnonymouslyAsync()` throws a `FirebaseException`. 2. Call `adapter.SignInAnonymouslyAsync()`. 3. Await the result. 4. Assert that the returned `FirebaseResult` has `IsSuccess = false`. 5. Assert that the `Error` property is not null and contains the correct error code from the mock exception.","The method catches the exception and returns a failure `FirebaseResult` with the appropriate error details. This test addresses RISK-004.","Mock of `FirebaseAuth` that throws a `FirebaseException`.","NUnit,Moq",1.5,"TASK-011"
TS-014,Authentication,Functional,Unit,Critical,High,"Verify `FirebaseAuthAdapter.SignInWithGoogleAsync` calls the SDK with the correct credential.","`FirebaseAuthAdapter` is implemented.","1. Mock `FirebaseAuth` and `GoogleAuthProvider`. 2. Call `adapter.SignInWithGoogleAsync(""test_id_token"")`. 3. Verify that `GoogleAuthProvider.GetCredential(""test_id_token"", null)` was called. 4. Verify that `FirebaseAuth.SignInWithCredentialAsync()` was called with the credential from the previous step. 5. Assert the method returns a successful `FirebaseResult`.","The adapter correctly creates a Google credential from the ID token and uses it to call the sign-in method. This test addresses RISK-003 from a logic perspective.","Mock of `FirebaseAuth` and `GoogleAuthProvider`.","NUnit,Moq",2,"TASK-011"
TS-015,Authentication,Functional,Unit,Critical,High,"Verify `FirebaseAuthAdapter.IsSignedIn` returns correct status.","`FirebaseAuthAdapter` is implemented.","1. Mock `FirebaseAuth.CurrentUser` to return a mock `FirebaseUser` object. 2. Call `adapter.IsSignedIn()`. 3. Assert the result is true. 4. Mock `FirebaseAuth.CurrentUser` to return null. 5. Call `adapter.IsSignedIn()`. 6. Assert the result is false.","The method correctly reflects the signed-in status based on `CurrentUser` being null or not.","Mock of `FirebaseAuth`.","NUnit,Moq",1,"TASK-011"
TS-016,Cloud Save,Functional,Unit,Critical,High,"Verify `FirestoreCloudSaveAdapter.SavePlayerProfileAsync` calls `SetAsync` with mapped DTO.","`FirestoreCloudSaveAdapter` and `PlayerProfileMapper` are implemented.","1. Mock `FirebaseFirestore`, `DocumentReference`, and `PlayerProfileMapper`. 2. Create a domain `PlayerProfile` and a corresponding `PlayerProfileDto`. Setup the mapper mock to return the DTO. 3. Call `adapter.SavePlayerProfileAsync(""test_user_id"", profile)`. 4. Verify `_db.Collection(""users"").Document(""test_user_id"")` was called. 5. Verify `docRef.SetAsync()` was called with the mapped DTO. 6. Assert the result is a successful `FirebaseResult`.","The adapter correctly gets the document reference and calls `SetAsync` with the object produced by the mapper. This test addresses RISK-002 and RISK-004.","Mocks for Firestore SDK objects, sample domain/DTO objects.","NUnit,Moq",2,"TASK-019"
TS-017,Cloud Save,Functional,Unit,Critical,High,"Verify `FirestoreCloudSaveAdapter.LoadPlayerProfileAsync` handles a found document.","`FirestoreCloudSaveAdapter` and `PlayerProfileMapper` are implemented.","1. Mock `FirebaseFirestore`, `DocumentReference`, and `DocumentSnapshot`. Setup the snapshot mock's `Exists` to be true and `ConvertTo<T>()` to return a `PlayerProfileDto`. 2. Call `adapter.LoadPlayerProfileAsync(""test_user_id"")`. 3. Await the result. 4. Assert the `FirebaseResult` is successful. 5. Assert the `Value` is a `PlayerProfile` domain object that was correctly mapped from the DTO.","The adapter returns a successful result containing the correctly mapped domain object when the document exists. This test addresses RISK-006.","Mocks for Firestore SDK objects, sample domain/DTO objects.","NUnit,Moq",2,"TASK-019"
TS-018,Cloud Save,Functional,Unit,Critical,High,"Verify `FirestoreCloudSaveAdapter.LoadPlayerProfileAsync` handles a missing document.","`FirestoreCloudSaveAdapter` is implemented.","1. Mock `FirebaseFirestore`, `DocumentReference`, and `DocumentSnapshot`. Setup the snapshot mock's `Exists` to be false. 2. Call `adapter.LoadPlayerProfileAsync(""test_user_id"")`. 3. Await the result. 4. Assert the `FirebaseResult` is a failure (`IsSuccess = false`). 5. Assert the error message indicates that the document was not found.","The adapter returns a failure result when the document snapshot does not exist.","Mocks for Firestore SDK objects.","NUnit,Moq",1.5,"TASK-019"
TS-019,Cloud Save,Functional,Unit,Critical,High,"Verify `FirestoreCloudSaveAdapter` handles a `FirebaseException` during load.","`FirestoreCloudSaveAdapter` is implemented.","1. Mock `FirebaseFirestore` and `DocumentReference` so that the call to `GetSnapshotAsync()` throws a `FirebaseException`. 2. Call `adapter.LoadPlayerProfileAsync(""test_user_id"")`. 3. Await the result. 4. Assert the `FirebaseResult` is a failure (`IsSuccess = false`). 5. Assert the `Error` property contains the details from the thrown exception.","The adapter correctly catches the exception and wraps it in a failure `FirebaseResult`. This test addresses RISK-004.","Mocks for Firestore SDK objects that throw an exception.","NUnit,Moq",1.5,"TASK-019"
TS-020,Analytics,Functional,Unit,High,High,"Verify `FirebaseAnalyticsAdapter.LogEvent` with parameters correctly converts dictionary to SDK parameters.","`FirebaseAnalyticsAdapter` is implemented.","1. Mock `FirebaseAnalytics`. 2. Create a `Dictionary<string, object>` with string, int, and double values. 3. Call `adapter.LogEvent(""test_event"", parameters)`. 4. Capture the `Parameter[]` array passed to the mock `FirebaseAnalytics.LogEvent`. 5. Assert that the array has the correct length. 6. Assert that each element in the array has the correct name and value, converted to the appropriate `Parameter` type.","The adapter correctly transforms the C# dictionary into the `Firebase.Analytics.Parameter` array format required by the SDK.","Mock of `FirebaseAnalytics`.","NUnit,Moq",2.5,"TASK-022"
TS-021,Remote Config,Functional,Unit,High,High,"Verify `FirebaseRemoteConfigAdapter.InitializeAsync` calls the correct SDK sequence on success.","`FirebaseRemoteConfigAdapter` is implemented.","1. Mock `FirebaseRemoteConfig`. Setup `SetDefaultsAsync`, `FetchAsync`, and `ActivateAsync` to return successful tasks. 2. Call `adapter.InitializeAsync(defaults)`. 3. Await the result. 4. Verify that `SetDefaultsAsync`, `FetchAsync`, and `ActivateAsync` were all called in the correct order. 5. Assert the returned `FirebaseResult` is successful.","The adapter executes the full initialization sequence as defined in the SDS.","Mock of `FirebaseRemoteConfig`.","NUnit,Moq",2,"TASK-025"
TS-022,Remote Config,Functional,Unit,High,High,"Verify `FirebaseRemoteConfigAdapter.GetInt` returns the remote value on success and default value on failure.","`FirebaseRemoteConfigAdapter` is implemented.","1. Mock `FirebaseRemoteConfig` and `ConfigValue`. Setup `GetValue(""test_key"")` to return a mock `ConfigValue` with `StringValue = ""123""`. 2. Call `adapter.GetInt(""test_key"", 0)`. 3. Assert the result is 123. 4. Setup `GetValue(""missing_key"")` to return a `ConfigValue` where the source is `Default`. 5. Call `adapter.GetInt(""missing_key"", 99)`. 6. Assert the result is 99.","The adapter correctly retrieves and parses the value from the SDK, and correctly falls back to the provided default value.","Mock of `FirebaseRemoteConfig`.","NUnit,Moq",1.5,"TASK-025"
TS-023,DI and Facade,Functional,Integration,Critical,High,"Verify the `FirebaseServiceRegistration` correctly sets up all services in a DI container.","All adapters, the facade, and the registration module are implemented.","1. Create an instance of a DI service collection (e.g., `Microsoft.Extensions.DependencyInjection.ServiceCollection`). 2. Call the `services.AddFirebaseInfrastructure()` extension method. 3. Build the service provider. 4. Resolve `FirebaseServiceFacade`. 5. Resolve each individual service interface (e.g., `IAuthenticationService`).","All resolutions succeed without exceptions. The `FirebaseServiceFacade` is not null. Asserting that `facade.Auth` is the same instance as the resolved `IAuthenticationService` passes.","N/A","VContainer/Zenject/etc.,C#,Dependency Injection",1,"TASK-029"
TS-024,Integration Suite,Functional,Integration,High,High,"End-to-end test of Anonymous Auth and Cloud Save loop.","An integration test scene is set up with a DI container. A Firebase 'dev' project is configured and accessible.","1. From a Unity Test Runner `[UnityTest]`, get the `FirebaseServiceFacade` from the DI container. 2. Call `facade.Auth.SignInAnonymouslyAsync()`. Assert success. 3. Using the new user ID, create a `PlayerProfile` object and call `facade.CloudSave.SavePlayerProfileAsync()`. Assert success. 4. Call `facade.CloudSave.LoadPlayerProfileAsync()`. Assert success. 5. Assert the loaded profile data is identical to the saved data. 6. In a teardown step, delete the user from Firebase Auth and the document from Firestore.","The entire sequence completes successfully. Data is verified to be written to and read from the live Firebase backend. Teardown leaves the backend clean. This test addresses RISK-005.","Live Firebase 'dev' project credentials.","Unity Test Runner,Firebase SDKs",5,"TASK-032"
TS-025,Integration Suite,Functional,Integration,High,High,"End-to-end test of Remote Config fetching.","An integration test scene is set up. A specific key-value pair is configured in the Firebase Remote Config 'dev' project console.","1. From a `[UnityTest]`, get the `FirebaseServiceFacade`. 2. Call `facade.RemoteConfig.InitializeAsync()`. Assert success. 3. Call `facade.RemoteConfig.GetString(""test_key"", ""default"")`. 4. Assert the returned value matches the value set in the Firebase Console.","The test successfully fetches and activates remote values, and the adapter returns the correct, non-default value.","A predefined key/value in the Remote Config console.","Unity Test Runner,Firebase Console",1.5,"TASK-033"
TS-026,Integration Suite,Functional,Integration,High,Manual Only,"End-to-end test of Analytics event logging.","An integration test scene is set up. Firebase 'dev' project is configured.","1. From a `[UnityTest]`, get the `FirebaseServiceFacade`. 2. Call `facade.Analytics.LogEvent(""integration_test_event"", new Dictionary<string, object> {{ ""timestamp"", DateTime.UtcNow.Ticks }})`. 3. Open the Firebase Console and navigate to the DebugView for the project. 4. Observe the stream of incoming events.","The `integration_test_event` appears in the DebugView within a minute, with its associated parameters visible.","N/A","Unity Test Runner,Firebase Console (DebugView)",1.5,"TASK-033"
TS-027,Quality,Code Coverage,System,Should Have,High,"Measure unit test code coverage for all service adapters.","All unit tests for adapters are complete.","1. Configure and run the CI pipeline step that executes all NUnit tests. 2. The pipeline step should use a code coverage tool (e.g., dotCover, Coverlet). 3. The tool generates a coverage report. 4. The pipeline step checks if the coverage percentage meets or exceeds the defined threshold (e.g., 80%).","The CI job passes, indicating that the unit test code coverage for the service adapters meets the project's quality standard. This test formalizes the goal of US-012.","N/A","CI/CD Platform,NUnit,Code Coverage Tool",1,"TASK-011,TASK-019,TASK-022,TASK-025"
TS-028,Regression,Regression,System,Critical,High,"Execute the full suite of automated tests (Unit and Integration) to prevent regressions.","All automated tests are implemented and stable.","1. A developer commits a change to a feature branch. 2. The change is merged into the main development branch. 3. The CI/CD pipeline is automatically triggered. 4. The pipeline executes all NUnit unit tests. 5. The pipeline executes all Unity integration tests against the dev environment or emulator.","All tests in the suite pass. The build is green, indicating the recent change did not introduce any regressions in the tested functionality.","N/A","CI/CD Platform,NUnit,Unity Test Runner",0.5,""
TS-029,Security,Security,System,High,Manual Only,"Review Firestore Security Rules for the 'users' collection.","The Firestore database has been created and security rules have been drafted.","1. Open the Firebase Console and navigate to the Firestore security rules. 2. Review the rules for the `users/{userId}` path. 3. Ensure that a read or write operation is only allowed if `request.auth.uid == userId`. 4. Ensure that unauthenticated access is denied.","The security rules correctly enforce that a user can only read or write their own data, and no one else's. Unauthenticated access is fully blocked. This mitigates unauthorized data access risks.","N/A","Firebase Console",2,"TASK-018"
TS-030,Performance,Non-Functional,System,Medium,High,"Benchmark the duration of the `FirebaseInitializer.InitializeAsync` process.","The integration test scene is set up.","1. In a `[UnityTest]`, start a `Stopwatch`. 2. Await `FirebaseInitializer.InitializeAsync()`. 3. Stop the `Stopwatch`. 4. Log the elapsed milliseconds. 5. Fail the test if the duration exceeds a predefined threshold (e.g., 5 seconds).","The initialization time is logged and remains within an acceptable threshold, ensuring it does not excessively prolong app startup time.","N/A","Unity Test Runner",1,"TASK-007"