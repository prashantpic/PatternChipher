test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
RC-T101,Configuration Schema,Functional,Unit,Critical,Yes,"Verifies the basic structure of remote_config_template.json, ensuring it's a valid JSON object with the correct schemaVersion key and data type. This is the most fundamental check.","The remote_config_template.json file exists.","1. Use a JSON schema validator or a script.
2. Load the remote_config_template.json file.
3. Validate that the root is a JSON object.
4. Validate that the `schemaVersion` key exists and its value is a string matching the semantic versioning pattern (e.g., ""1.0.0"").",The validation passes without errors. The schemaVersion matches the expected format.,A valid remote_config_template.json file.,JSON Schema Validator,jq,Python script,0.5,TASK-RC-101
RC-T102,Configuration Schema,Functional,Unit,Critical,Yes,"Verifies the structure and data types of the `featureFlags` object as per the SDS.","The `featureFlags` section has been added to remote_config_template.json.","1. Use a JSON schema validator.
2. Load the remote_config_template.json file.
3. Validate that the `featureFlags` key exists and its value is a JSON object.
4. Validate that all specified keys (e.g., `isCloudSaveEnabled`) exist and their values are booleans.",The validation passes, confirming all keys and their boolean types are correct.,A config file with a complete `featureFlags` section.,JSON Schema Validator,jq,Python script,0.5,TASK-RC-102
RC-T103,Configuration Schema,Functional,Unit,Critical,Yes,"Verifies the complex structure and data types within the `scoringRules` object, including all nested objects and numeric values.","The `scoringRules` section has been added to remote_config_template.json.","1. Use a JSON schema validator.
2. Load the remote_config_template.json file.
3. Validate the `scoringRules` object and all its nested objects (`efficiencyBonus`, `speedBonus`, etc.) exist.
4. Validate that all keys have the correct data types (Integer, JSONObject) as defined in the SDS.",The validation passes, confirming the entire `scoringRules` structure is compliant with the SDS.,A config file with a complete `scoringRules` section.,JSON Schema Validator,jq,Python script,1,TASK-RC-103
RC-T104,Configuration Schema,Functional,Unit,Critical,Yes,"Verifies the structure of the `difficultyTiers` array and the schema of the objects within it.","The `difficultyTiers` section has been added to remote_config_template.json.","1. Use a JSON schema validator.
2. Load the remote_config_template.json file.
3. Validate `difficultyTiers` is a JSONArray.
4. Validate that each object in the array contains all required keys (`tierId`, `gridSizeRange`, `symbolCountRange`, etc.) with the correct data types.",The validation passes, confirming the array and its object schema are compliant with the SDS.,A config file with at least one entry in the `difficultyTiers` array.,JSON Schema Validator,jq,Python script,1,TASK-RC-104
RC-T105,Configuration Schema,Functional,Unit,Critical,Yes,"Verifies the structure of the `pcgRules` object and its `controlledIntroduction` array schema.","The `pcgRules` section has been added to remote_config_template.json.","1. Use a JSON schema validator.
2. Load the remote_config_template.json file.
3. Validate `pcgRules` is a JSONObject containing a `controlledIntroduction` JSONArray.
4. Validate that each object in the array has the required keys (`unlocksAtLevel`/`unlocksAtStars`, `elementType`, `elementId`) with correct data types.",The validation passes, confirming the `pcgRules` schema is compliant with the SDS.,A config file with a complete `pcgRules` section.,JSON Schema Validator,jq,Python script,1,TASK-RC-105
RC-T201,CI/CD,Smoke,Integration,Critical,Yes,"Ensures the CI validation job correctly identifies and passes a pull request containing a syntactically valid `remote_config_template.json` file.","The CI job for JSON validation is implemented.","1. Create a new branch.
2. Make a valid change to the `remote_config_template.json` file (e.g., change a number).
3. Push the branch and create a Pull Request.
4. Observe the CI pipeline execution.",The 'JSON Validation' check associated with the PR must complete successfully (shows a green checkmark). The PR is not blocked by this check.,A valid `remote_config_template.json` file.,Git,CI/CD Platform (GitHub Actions),2,TASK-RC-201
RC-T202,CI/CD,Negative,Integration,Critical,Yes,"Ensures the CI validation job correctly identifies and fails a pull request containing a syntactically invalid `remote_config_template.json` file, blocking the merge.","The CI job for JSON validation is implemented and set as a required check.","1. Create a new branch.
2. Introduce a syntax error into `remote_config_template.json` (e.g., remove a comma, add an extra bracket).
3. Push the branch and create a Pull Request.
4. Observe the CI pipeline execution.",The 'JSON Validation' check associated with the PR must fail (shows a red 'X'). The PR merge button should be disabled.,A `remote_config_template.json` file with a deliberate syntax error.,Git,CI/CD Platform (GitHub Actions),2,TASK-RC-201
RC-T203,CI/CD,Regression,Integration,High,Yes,"Ensures that pull requests that do not modify the remote config file do not trigger a failure in the validation job.","The CI job for JSON validation is implemented.","1. Create a new branch.
2. Modify a different file in the repository (e.g., README.md).
3. Push the branch and create a Pull Request.
4. Observe the CI pipeline execution.",The 'JSON Validation' check should either be skipped or pass successfully. The PR should not be blocked.,Any file other than `remote_config_template.json`.,Git,CI/CD Platform (GitHub Actions),1,TASK-RC-201
RC-T204,CI/CD,Smoke,System,Critical,Yes,"Verifies that merging a valid PR to the `main` branch successfully triggers the automated deployment to the staging environment.","The CI job for staging deployment is implemented. The `main` branch is protected.","1. Create and approve a PR with a valid change to `remote_config_template.json`.
2. Merge the PR into the `main` branch.
3. Navigate to the CI/CD pipeline monitoring view.
4. Verify that the 'Deploy to Staging' workflow has been triggered.",The 'Deploy to Staging' workflow starts automatically upon the merge event.,A valid, approved PR.,Git,CI/CD Platform (GitHub Actions),Firebase Console,3,TASK-RC-202
RC-T205,CI/CD,Functional,System,Critical,No,"Confirms that the configuration deployed to the staging Firebase project exactly matches the version that was merged into the `main` branch.","The 'Deploy to Staging' CI job has completed successfully.","1. After a successful staging deployment, open the staging Firebase project console.
2. Navigate to the Remote Config section.
3. Compare the active configuration in the console with the contents of `remote_config_template.json` in the `main` branch of the Git repository.
4. Pay special attention to the value that was changed in the merge.",The JSON content in the staging Firebase Remote Config console is identical to the file content in the `main` branch.,A successfully completed staging deployment.,Firebase Console,Git Repository,1,TASK-RC-202
RC-T206,CI/CD,Negative,System,Critical,Yes,"Tests the CI/CD pipeline's error handling and alerting when the staging deployment job fails due to an authentication error.","The CI job for staging deployment is implemented.","1. Intentionally revoke or expire the Firebase service account credentials stored as a CI/CD secret.
2. Merge a valid PR to `main` to trigger the deployment job.
3. Observe the CI/CD pipeline execution and configured notification channels (e.g., email, Slack).",The 'Deploy to Staging' job must fail with a clear authentication error message. An alert must be sent to the designated channel.,Revoked or invalid Firebase credentials.,CI/CD Platform (GitHub Actions),Firebase IAM,Alerting Channel (Slack/Email),3,TASK-RC-202
RC-T207,CI/CD,Security,System,Critical,Yes,"Verifies that CI/CD pipeline secrets (e.g., Firebase API tokens) are not exposed in the logs of the staging deployment job.","The CI job for staging deployment is implemented.","1. Trigger the staging deployment job (either successfully or with a failure).
2. Review the entire log output of the 'Deploy to Staging' job.
3. Search for any part of the Firebase token or service account key.",The logs must not contain the secret token or key in plain text. They should be masked (e.g., shown as '***').,A triggered deployment job.,CI/CD Platform (GitHub Actions),2,TASK-RC-202
RC-T301,Client Contract,Functional,Integration,Critical,Yes,"Simulates the game client fetching and successfully parsing a known-good `remote_config_template.json`. This validates the client-side contract.","A test harness or client-side unit test environment exists. A known-good `remote_config_template.json` is available as a test asset.","1. In a test script, load the JSON content from the test asset file.
2. Use the client's parsing/deserialization logic to convert the JSON string into strongly-typed C# objects.
3. Assert that the resulting object is not null and that several key properties have the expected values.",The JSON is deserialized into the target C# objects without any exceptions. Key values are correctly mapped.,A valid remote_config_template.json file.,Client-side Unit Test Framework (e.g., NUnit),JSON parsing library,2,"Client-side parsing logic must be implemented (REPO-PATT-005)"
RC-T302,Client Contract,Regression,Integration,High,Yes,"Verifies the client's robustness by ensuring it falls back to a default value if a key is unexpectedly removed from the remote config, preventing crashes.","The client has hardcoded default values. A test harness exists.","1. Create a variant of the config file where a key is removed (e.g., remove `star2` from `starThresholds`).
2. In a test script, load and parse this modified JSON.
3. Access the property corresponding to the removed key.
4. Assert that the value returned is the client's hardcoded default, not null or an error.",The client code returns the hardcoded default value for the missing key and does not throw a parsing exception. A warning may be logged.,A config file with a deliberately removed key.,Client-side Unit Test Framework (e.g., NUnit),JSON parsing library,2,"Client-side parsing logic with defaults must be implemented (REPO-PATT-005)"
RC-T303,Client Contract,Negative,Integration,High,Yes,"Verifies the client's robustness by ensuring it falls back to a default value if a key's data type is changed in the remote config, preventing crashes.","The client has hardcoded default values. A test harness exists.","1. Create a variant of the config file where a key's type is changed (e.g., change `baseScorePerLevel: 1000` to `baseScorePerLevel: ""one-thousand"").
2. In a test script, load and parse this modified JSON.
3. Attempt to access the property with the incorrect type.
4. Assert that the value returned is the client's hardcoded default.",The client code returns the hardcoded default value for the malformed key and does not throw a parsing exception. An error should be logged.,A config file with a deliberate data type mismatch.,Client-side Unit Test Framework (e.g., NUnit),JSON parsing library,2,"Client-side parsing logic with defaults must be implemented (REPO-PATT-005)"
RC-T304,Client Contract,Functional,Integration,Medium,Yes,"Ensures the client application correctly checks the `schemaVersion` and logs a warning if a major version mismatch is detected.","Client-side version checking logic is implemented.","1. Set the client's expected schema version to ""1.0.0"".
2. Create a variant of the config file where `schemaVersion` is ""2.0.0"".
3. In a test script, load and parse this modified JSON.
4. Check the application's log output.",A warning message indicating a schema version mismatch is present in the logs.,A config file with a different major schema version.,Client-side Unit Test Framework (e.g., NUnit),Logging Framework,1.5,"Client-side parsing logic must be implemented (REPO-PATT-005)"
RC-T401,Feature Flagging,Functional,User Acceptance,Critical,No,"QA manually verifies that toggling feature flags in the staging remote config correctly enables or disables the corresponding features in the game client.","A game client build is connected to the staging environment. QA has access to update the staging Remote Config.","1. In the staging Firebase console, set `isLeaderboardsEnabled` to `false` and publish.
2. Relaunch the game client.
3. Navigate to where the leaderboard button should be.
4. Verify the button is hidden or disabled.
5. Repeat for `true` and for other feature flags.",The game client UI and functionality correctly reflect the state of each feature flag on the subsequent launch after a change.,A game client build. Access to staging Firebase project.,Game Client,Firebase Console,4,"Game client must implement feature flag logic"
RC-T402,Game Balancing,Functional,User Acceptance,Critical,No,"A Game Designer or QA tester plays the game to validate that changes to `scoringRules` have the intended effect on gameplay and feel balanced.","A game client build is connected to the staging environment.","1. Record the score for completing a level with the current `scoringRules`.
2. In the staging Firebase console, double the value of `baseScorePerLevel` and publish.
3. Relaunch the client and complete the same level again.
4. Compare the new score with the old score.",The new score reflects the change made to the scoring rules, and the overall experience feels subjectively correct to the designer/tester.,A game client build. Access to staging Firebase project.,Game Client,Firebase Console,8,"Game client must implement scoring logic"
RC-T403,Game Balancing,Functional,User Acceptance,Critical,No,"A Game Designer or QA tester validates that changes to `difficultyTiers` (e.g., grid size, symbol count) result in procedurally generated levels that match the new difficulty parameters.","A game client build is connected to the staging environment.","1. Observe the types of puzzles generated for the 'BEGINNER' tier.
2. In the staging Firebase console, modify the `gridSizeRange` for the 'BEGINNER' tier to only allow ""5x5"" and publish.
3. Relaunch the client and play several levels in the 'BEGINNER' tier.",All newly generated levels for the 'BEGINNER' tier should now have a 5x5 grid size.,A game client build. Access to staging Firebase project.,Game Client,Firebase Console,8,"Game client must implement PCG logic based on config"
RC-T404,Process Documentation,Functional,User Acceptance,High,No,"A team member (not the author) follows the 'Production Deployment Guide' to promote the staging config to a test/dummy production environment to ensure the steps are clear and accurate.","The Production Deployment Guide (WI-RC-312) is written. A 'dummy' production-like Firebase project exists for this test.","1. Provide the reviewer with the documentation.
2. The reviewer must follow the steps exactly as written to copy the staging config to the dummy production project.
3. The reviewer notes any ambiguities, outdated screenshots, or errors in the document.",The reviewer is able to successfully complete the promotion process using only the provided documentation. The documentation is updated based on feedback.,The written deployment guide.,Firebase Console,Documentation Tool (Wiki/Confluence),4,TASK-RC-302
RC-T405,Process Documentation,Functional,User Acceptance,High,No,"A team member (not the author) follows the 'Production Rollback Procedure' to revert a change, ensuring the steps are clear and effective.","The Production Rollback Procedure (part of WI-RC-312) is written. A change has been deployed to the staging environment.","1. Provide the reviewer with the documentation.
2. The reviewer must follow the rollback steps to revert the most recent change in the staging Firebase project using its version history.
3. The reviewer notes any ambiguities or errors in the document.",The reviewer is able to successfully revert the configuration to the previous version using only the provided documentation.,The written rollback guide.,Firebase Console,Documentation Tool (Wiki/Confluence),3,TASK-RC-302
RC-T406,Game Balancing,Exploratory,User Acceptance,Medium,No,"An experienced tester or designer freely plays the game with new configuration changes, looking for unintended consequences or exploits.","A new set of balancing parameters has been deployed to staging.","1. The tester is informed of the high-level changes (e.g., ""combos are worth more, speed bonus is harder to get"").
2. The tester plays the game, trying different strategies to see if any are now broken or overpowered.
3. The tester looks for edge cases, such as achieving a negative score or an impossibly high one.",No game-breaking exploits or severely negative player experiences are discovered. Feedback is provided on the subjective 'feel' of the changes.,A game client build with new config changes on staging.,Game Client,4,""
RC-T407,Documentation,Functional,User Acceptance,High,No,"A developer (ideally new to the project) reviews the repository README.md to ensure it is clear, comprehensive, and provides enough information to understand the repository's purpose and workflow.","The README.md file (WI-RC-311) has been written and committed.","1. The reviewer is asked to read the README.md file.
2. The reviewer is asked if they understand the purpose of the repo, the `config-as-code` concept, and the high-level change management process.
3. The reviewer provides feedback on clarity and completeness.",The reviewer confirms that the documentation is clear and provides a good introduction to the project. The README is updated based on feedback.,The written README.md file.,Git Repository,2,TASK-RC-301
RC-T501,Performance,Non-Functional,System,Medium,Yes,"Monitors the file size of `remote_config_template.json` to prevent it from growing excessively large, which could negatively impact client startup time and data usage.","A baseline size is known. A threshold is defined (e.g., 50KB).","1. As part of the CI validation job, add a step that checks the file size of `remote_config_template.json`.
2. Compare the size against the predefined threshold.
3. If the size exceeds the threshold, fail the CI job or issue a prominent warning.",The CI job passes if the file size is within the acceptable threshold. It fails or warns if the file is too large.,The remote_config_template.json file.,CI/CD Platform (GitHub Actions),Shell script (`ls -l`, `awk`),1,""