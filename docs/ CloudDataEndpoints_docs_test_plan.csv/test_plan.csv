test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
CDS-DOC-001,Documentation,Static/Review,System,High,No,"Verify that the UserProfile.md schema document accurately reflects the Software Design Specification (SDS).","The `UserProfile.md` file has been created and committed. The SDS document is available.","1. Open the `firebase/firestore/data/schemas/UserProfile.md` file. 2. Open the SDS document, section 3. 3. Compare each field name, data type, required status, and description in the markdown file against the SDS. 4. Verify all nested objects (e.g. `player_settings`) are documented correctly.","The markdown document is a 1:1 match with the SDS section 3. All fields are present and correctly specified. The document is clear and unambiguous.",SDS Document,Manual Review,1,"Create UserProfile.md Schema Document"
CDS-CONF-001,Database Configuration,Functional,System,Low,No,"Verify the `firestore.indexes.json` file is a valid JSON and contains the required placeholder structure.","The `firestore.indexes.json` file has been created.","1. Open the `firebase/firestore/data/firestore.indexes.json` file. 2. Validate its content using a JSON linter or validator. 3. Check for the presence of the `indexes` and `fieldOverrides` arrays. 4. Confirm a commented-out example index exists.","The file is valid JSON. It contains the required empty arrays and a commented-out example as a template for future developers.",N/A,"JSON Linter, Text Editor",0.5,"Create Placeholder firestore.indexes.json"
CDS-DOC-002,Documentation,Static/Review,System,Medium,No,"Verify the Backup and Recovery Policy document contains all mandated criteria from the SDS.","The `backups/backup_policy.md` file has been created. The SDS is available.","1. Open `firebase/firestore/data/backups/backup_policy.md`. 2. Verify it explicitly states the use of PITR. 3. Verify it defines an RPO of 24 hours and an RTO of 4 hours. 4. Verify it outlines a high-level recovery procedure. 5. Verify it mandates semi-annual recovery drills.","The document accurately reflects all policy requirements as specified in the SDS and task acceptance criteria.",SDS Document,Manual Review,1,"Document Backup and Recovery Policy"
CDS-DOC-003,Documentation,Static/Review,System,Medium,No,"Verify the Sync Triggers documentation clearly defines all required automatic and manual triggers.","The `strategies/SyncTriggers.md` file has been created.","1. Open `firebase/firestore/data/strategies/SyncTriggers.md`. 2. Confirm the presence of automatic triggers: 'Application Pause/Quit', 'Significant Progress', 'After Level Completion'. 3. Confirm the specification for a manual 'Sync Now' button. 4. Confirm an efficiency recommendation (e.g., check for local changes) is included.","The document is a complete specification for client-side developers to implement sync triggers, matching the SDS.",SDS Document,Manual Review,1,"Document Cloud Save Sync Triggers"
CDS-DOC-004,Documentation,Static/Review,System,Medium,No,"Verify the Conflict Resolution documentation clearly defines the 'Last Write Wins' strategy and user-facing flows.","The `strategies/ConflictResolution.md` file has been created.","1. Open `firebase/firestore/data/strategies/ConflictResolution.md`. 2. Verify the primary strategy is 'Last Write Wins' based on `timestamp_of_last_cloud_sync`. 3. Verify the client-side read-before-write flow is documented. 4. Verify the user-prompt flow for initial sync conflicts is fully described.","The document provides unambiguous instructions for client-side developers on handling data synchronization conflicts.",SDS Document,Manual Review,1,"Document Conflict Resolution Strategy"
CDS-TEST-SETUP-001,Test Environment,Smoke,System,Critical,Yes,"Verify that the test environment can be initialized and can run a basic test against the Firebase Emulator.","Node.js project has been set up with all dependencies installed.","1. Run the `npm run test` command from the project root.","The Firebase Emulator suite starts, Jest runs, and a sample test successfully connects to the local emulated Firestore instance and passes without errors.",N/A,"Node.js, npm, Firebase Emulator Suite",0.2,"Setup Node.js Project with Firebase Emulator and Jest"
CDS-TEST-SETUP-002,Test Environment,Functional,Unit,Critical,Yes,"Verify test helpers can generate valid and invalid mock data for UserProfile.","The test helper module has been created.","1. In a test file, import the test helper functions. 2. Call the function to generate a valid UserProfile object and assert its structure. 3. Call a function to generate an invalid UserProfile object (e.g., missing field) and assert it is invalid.","The helper functions correctly produce data objects that conform to or violate the schema as intended, which can then be used in security rule tests.",N/A,"Jest, TypeScript",0.1,"Develop Test Helpers and Mock Data"
CDS-SEC-001,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify a user can only read their own `userProfile` document and not others'.","Firebase Emulator is running with `firestore.rules`. Test helper for creating authenticated Firestore clients is available. A document exists for `userA`.","1. Authenticate as `userA`. 2. Attempt to read `/userProfiles/userA`. 3. Authenticate as `userB`. 4. Attempt to read `/userProfiles/userA`. 5. Attempt an unauthenticated read of `/userProfiles/userA`.","Step 2 succeeds. Steps 3 and 5 fail with a 'permission-denied' error.",UIDs for userA and userB,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Read/Delete and Data Isolation"
CDS-SEC-002,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify a user can only delete their own `userProfile` document and not others'.","Firebase Emulator is running. Test helper for authenticated clients is available. A document exists for `userA`.","1. Authenticate as `userB`. 2. Attempt to delete `/userProfiles/userA`. 3. Authenticate as `userA`. 4. Attempt to delete `/userProfiles/userA`.","Step 2 fails with a 'permission-denied' error. Step 4 succeeds.",UIDs for userA and userB,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Read/Delete and Data Isolation"
CDS-SEC-003,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify that listing the `userProfiles` collection is denied for all users to prevent user ID enumeration.","Firebase Emulator is running.","1. Authenticate as `userA`. 2. Attempt to perform a list/query operation on the `/userProfiles` collection.","The operation fails with a 'permission-denied' error.",UID for userA,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Finalize Rules with Global Denies"
CDS-SEC-004,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify the `create` operation is allowed only for the document owner with a schema-valid payload.","Firebase Emulator is running. Test helper for authenticated clients and mock data is available.","1. Authenticate as `userA`. 2. Attempt to create `/userProfiles/userA` with a valid V1 payload. 3. Authenticate as `userB`. 4. Attempt to create `/userProfiles/userA` with a valid V1 payload.","Step 2 succeeds. Step 4 fails with a 'permission-denied' error.",UIDs for userA and userB. Valid mock UserProfile object.,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Create Operation and Validation"
CDS-SEC-005,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify the `create` operation is denied for payloads that do not match the schema (e.g., missing required fields).","Firebase Emulator is running.","1. Authenticate as `userA`. 2. Attempt to create `/userProfiles/userA` with a payload missing the required `user_profile_schema_version` field.","The operation fails with a 'permission-denied' error.",UID for userA. Invalid mock UserProfile object.,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Create Operation and Validation"
CDS-SEC-006,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify the `create` operation is denied for payloads with incorrect data types.","Firebase Emulator is running.","1. Authenticate as `userA`. 2. Attempt to create `/userProfiles/userA` with a payload where `unlocked_features` is a string instead of a list.","The operation fails with a 'permission-denied' error.",UID for userA. Invalid mock UserProfile object.,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Create Operation and Validation"
CDS-SEC-007,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify the `create` operation is denied if `timestamp_of_last_cloud_sync` is not a server timestamp.","Firebase Emulator is running.","1. Authenticate as `userA`. 2. Attempt to create `/userProfiles/userA` with a payload where `timestamp_of_last_cloud_sync` is a client-generated date string.","The operation fails with a 'permission-denied' error.",UID for userA. Invalid mock UserProfile object.,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Create Operation and Validation"
CDS-SEC-008,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify the `update` operation is denied when a user tries to update another user's document.","Firebase Emulator is running. A document for `userA` exists.","1. Authenticate as `userB`. 2. Attempt to update `/userProfiles/userA` with a valid payload.","The operation fails with a 'permission-denied' error.",UIDs for userA and userB. Valid mock UserProfile object.,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Update Operation and Validation"
CDS-SEC-009,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify the `update` operation is denied for payloads that violate the schema.","Firebase Emulator is running. A document for `userA` exists.","1. Authenticate as `userA`. 2. Attempt to update `/userProfiles/userA`, setting the required `player_settings` field to null.","The operation fails with a 'permission-denied' error.",UID for userA. Invalid mock UserProfile object.,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Implement Tests for Update Operation and Validation"
CDS-SEC-010,Firestore Security Rules,Security,Integration,Critical,Yes,"Verify that the global catch-all rule denies access to any undefined collection paths.","Firebase Emulator is running with the final `firestore.rules`.","1. Authenticate as any user. 2. Attempt to read or write to `/someRandomCollection/someDoc`.","The operation fails with a 'permission-denied' error.",Any UID,"Firebase Emulator, Jest, @firebase/rules-unit-testing",0.1,"Finalize Rules with Global Denies"
CDS-QA-001,Quality Assurance,Non-Functional,Unit,High,Yes,"Verify that the test suite for `firestore.rules` meets the >90% code coverage requirement.","All unit tests for `firestore.rules` are complete. Jest is configured to generate a coverage report.","1. From the command line, run `npm run test -- --coverage`. 2. Observe the output in the console and review the generated HTML report.","The test command completes successfully. The coverage summary table for `firestore.rules` shows a statement coverage of 90% or higher.",N/A,"Jest, npm",0.2,"Finalize Test Suite and Measure Coverage"
CDS-CI-001,CI/CD Pipeline,Functional,System,High,Partial,"Verify the CI workflow is triggered on a pull request and successfully runs all tests.","A pull request is opened to the `main` branch. The `.github/workflows/deploy.yml` file is in the PR.","1. Create a new branch with a minor, non-breaking code change. 2. Push the branch and open a pull request. 3. Navigate to the 'Actions' tab in GitHub. 4. Observe the workflow execution.","A workflow run is initiated. The 'Test' job checks out code, installs dependencies, and runs `npm test`. The job reports success (green checkmark).",A GitHub repository with Actions enabled.,"GitHub",0.5,"Configure GitHub Actions Workflow for Testing"
CDS-CI-002,CI/CD Pipeline,Functional,System,High,Partial,"Verify the CI workflow correctly reports a test failure and blocks dependent jobs like deployment.","A pull request is opened. The `.github/workflows/deploy.yml` file is in the PR and includes a 'Deploy' job.","1. Create a new branch. 2. Introduce a change that will cause a Jest test to fail. 3. Push the branch and open a pull request. 4. Observe the workflow execution in GitHub Actions.","The 'Test' job runs and fails (red X). The 'Deploy' job is skipped (or not run) and the overall workflow status is 'failure'.",A test case that can be easily broken.,"GitHub, Jest",0.5,"Configure GitHub Actions Workflow for Testing"
CDS-CI-003,CI/CD Pipeline,Functional,System,High,Partial,"Verify the 'Deploy' job successfully deploys Firestore artifacts to the staging environment after a merge to `main`.","A pull request with passing tests has been approved. GitHub secrets for Firebase staging project are configured. The workflow is configured to deploy on pushes to `main`.","1. Merge the approved pull request into the `main` branch. 2. Observe the workflow execution in GitHub Actions for the push to `main`. 3. After the 'Deploy' job completes, log into the Firebase Console for the staging project. 4. Check the deployed timestamp for Firestore rules and indexes.","The 'Test' job passes. The 'Deploy' job runs and succeeds. The rules and indexes in the Firebase staging project are updated to match the commit.",A valid Firebase service account JSON stored as a GitHub Secret. A staging Firebase project.,"GitHub, Firebase CLI, Firebase Console",1,"Add Staging Deployment Job to CI/CD Workflow"
CDS-DR-001,Disaster Recovery,Non-Functional,System,Medium,No,"Simulate a disaster recovery drill to validate the documented procedure and confirm the RTO can be met.","Production Firestore database has PITR enabled. A staging/test environment is available. The `backup_policy.md` is complete.","1. Identify a point-in-time for restoration. 2. Following the `backup_policy.md`, initiate a PITR restore to a new database instance. 3. Start a timer. 4. Perform integrity checks on the restored data. 5. Simulate updating application configuration to point to the new instance. 6. Stop the timer when the system is considered operational.","The data is successfully restored to the specified point-in-time. The entire process is completed within the 4-hour RTO. The documented procedure is accurate and actionable.",A live Firestore database with PITR enabled.,"Google Cloud Console, gcloud CLI",4,"Document Backup and Recovery Policy"
CDS-UAT-001,Cloud Save,Functional,UAT,High,No,"Verify the initial sync conflict resolution flow by prompting the user to choose between local and cloud save.","A game client build is available. Device A has local progress but is not signed in. A cloud save exists for the test user.","1. On Device A, play the game to create a local save (e.g., 20 stars). 2. Sign in with the test user account. 3. Observe the prompt that is displayed.","A prompt appears asking the user to choose between the local save and the cloud save, displaying key metrics for both (e.g., ""Local Save: 20 Stars"" vs. ""Cloud Save: 75 Stars""). Choosing one correctly becomes the new source of truth.",Two devices, a game client build, a test user account with pre-existing cloud data.,"Game Client, Firebase Backend",2,"Document Conflict Resolution Strategy"